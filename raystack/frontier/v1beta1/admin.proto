syntax = "proto3";

package raystack.frontier.v1beta1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "raystack/frontier/v1beta1/models.proto";
import "validate/validate.proto";

option go_package = "github.com/raystack/proton/frontier/v1beta1;frontierv1beta1";
option java_outer_classname = "Frontier";
option java_package = "io.raystack.proton.frontier.v1beta1";
// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Frontier Administration API",
    version: "0.2.0";
    description: "The Frontier APIs adhere to the OpenAPI specification, also known as Swagger, which provides a standardized approach for designing, documenting, and consuming RESTful APIs. With OpenAPI, you gain a clear understanding of the API endpoints, request/response structures, and authentication mechanisms supported by the Frontier APIs. By leveraging the OpenAPI specification, developers can easily explore and interact with the Frontier APIs using a variety of tools and libraries. The OpenAPI specification enables automatic code generation, interactive API documentation, and seamless integration with API testing frameworks, making it easier than ever to integrate Frontier into your existing applications and workflows."
    contact: {
      name: "Raystack Foundation"
      url: "https://raystack.org/"
      email: "hello@raystack.org"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/raystack/frontier/blob/main/LICENSE";
    };
  };
  schemes: HTTP;
  tags: [
    {name: "User"},
    {name: "Group"},
    {name: "Organization"},
    {name: "Project"},
    {name: "Relation"},
    {name: "Resource"},
    {name: "Policy"},
    {name: "Role"},
    {name: "Permission"}];
  consumes: "application/json";
  produces: "application/json";
  host: "127.0.0.1:7400";
  responses: {
    key: "200";
    value: {
      description: "OK - A successful response.";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "400";
    value: {
      description: "Bad Request - The request was malformed or contained invalid parameters.";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "401";
    value: {
      description: "Unauthorized - Authentication is required";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Forbidden - User does not have permission to access the resource";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Not Found - The requested resource was not found";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "500";
    value: {
      description: "Internal Server Error. Returned when theres is something wrong with Frontier server.";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  security_definitions: {
    security: {
      key: "Basic";
      value: {
        type: TYPE_BASIC;
        in: IN_HEADER;
        name: "Basic ";
        description: "use Client ID as username and Client Secret as password";
      }
    },
    security: {
      key: "Bearer";
      value: {
        type: TYPE_OAUTH2;
        in: IN_HEADER;
        name: "Bearer ";
        description: "Access token or JWT token, prefixed by Bearer: Bearer <token>";
      }
    }
  }
  security: {
    security_requirement: {key: "Basic"}
  }
  security: {
    security_requirement: {key: "Bearer"}
  }
};
service AdminService {
  // Users
  rpc ListAllUsers(ListAllUsersRequest) returns (ListAllUsersResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/users"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "List all users";
      description: "Lists all the users from all the organizations in a Frontier instance. It can be filtered by keyword, organization, group and state.";
    };
  }

  // Group
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/groups"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "List all groups";
      description: "Lists all the groups from all the organizations in a Frontier instance. It can be filtered by organization and state.";
    };
  }

  // Organizations
  rpc ListAllOrganizations(ListAllOrganizationsRequest) returns (ListAllOrganizationsResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/organizations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "List all organizations";
      description: "Lists all the organizations in a Frontier instance. It can be filtered by user and state.";
    };
  }

  // Projects
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/projects"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "List all projects";
      description: "Lists all the projects from all the organizations in a Frontier instance. It can be filtered by organization and state.";
    };
  }

  // Relations
  rpc ListRelations(ListRelationsRequest) returns (ListRelationsResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/relations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "List all relations";
    };
  }

  // Resources
  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/resources"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "List all resources";
      description: "Lists all the resources from all the organizations in a Frontier instance. It can be filtered by user, project, organization and namespace.";
    };
  }

  // Roles
  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
    option (google.api.http) = {
      post: "/v1beta1/roles",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Create platform role";
      description: "Creates a platform wide role. It can be used to grant permissions to all the resources in a Frontier instance.";
    };
  }

  rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
    option (google.api.http) = {
      put: "/v1beta1/roles/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Update role";
      description: "Update a role title, description and permissions."
    };
  }

  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
    option (google.api.http) = {delete: "/v1beta1/roles/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Delete platform role";
      description: "Delete a platform wide role and all of its relations.";
    };
  }

  // Permissions
  rpc CreatePermission(CreatePermissionRequest) returns (CreatePermissionResponse) {
    option (google.api.http) = {
      post: "/v1beta1/permissions",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Permission";
      summary: "Create platform permission";
      description: "Creates a permission. It can be used to grant permissions to all the resources in a Frontier instance.";
    };
  }

  rpc UpdatePermission(UpdatePermissionRequest) returns (UpdatePermissionResponse) {
    option (google.api.http) = {
      put: "/v1beta1/permissions/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Permission";
      summary: "Update platform permission";
      description: "Updates a permission by ID. It can be used to grant permissions to all the resources in a Frontier instance.";
    };
  }

  rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse) {
    option (google.api.http) = {delete: "/v1beta1/permissions/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Permission";
      summary: "Delete platform permission";
    };
  }

  // Preferences
  rpc ListPreferences(ListPreferencesRequest) returns (ListPreferencesResponse) {
    option (google.api.http) = {get: "/v1beta1/preferences"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Preference";
      summary: "List platform preferences";
      description: "Returns a list of all preferences configured on an instance in Frontier. e.g user, project, organization etc";
    };
  }
  rpc CreatePreferences(CreatePreferencesRequest) returns (CreatePreferencesResponse) {
    option (google.api.http) = {
      post: "/v1beta1/preferences",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Preference";
      summary: "Create platform preferences";
      description: "Create new platform preferences. The platform preferences **name** must be unique within the platform and can contain only alphanumeric characters, dashes and underscores.";
    };
  }

  // Check
  rpc CheckFederatedResourcePermission(CheckFederatedResourcePermissionRequest) returns (CheckFederatedResourcePermissionResponse) {
    option (google.api.http) = {
      post: "/v1beta1/admin/check",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authz";
      summary: "Check";
      description: "Returns true if a principal has required permissions to access a resource and false otherwise.<br/> Note the principal can be a user, group or a service account.";
    };
  }

  // Platform
  rpc AddPlatformUser(AddPlatformUserRequest) returns (AddPlatformUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/admin/platform/users",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Platform";
      summary: "Add platform user";
      description: "Adds a user to the platform.";
    };
  }

  rpc ListPlatformUsers(ListPlatformUsersRequest) returns (ListPlatformUsersResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/platform/users"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Platform";
      summary: "List platform users";
      description: "Lists all the users added to the platform.";
    };
  }

  rpc RemovePlatformUser(RemovePlatformUserRequest) returns (RemovePlatformUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/admin/platform/users/remove",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Platform";
      summary: "Remove platform user";
      description: "Removes a user from the platform.";
    };
  }

  // Checkout
  rpc DelegatedCheckout(DelegatedCheckoutRequest) returns (DelegatedCheckoutResponse) {
    option (google.api.http) = {
      post: "/v1beta1/admin/organizations/{org_id}/billing/{billing_id}/checkouts",
      body: "*"
      additional_bindings {
        post: "/v1beta1/admin/organizations/{org_id}/billing/checkouts",
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Checkout";
      summary: "Checkout a product or subscription";
      description: "Checkout a product to buy it one time or start a subscription plan on a billing account manually. It bypasses billing engine.";
    };
  }

  rpc ListAllInvoices(ListAllInvoicesRequest) returns (ListAllInvoicesResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/billing/invoices"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Invoice";
      summary: "List all invoices";
      description: "Lists all the invoices from all the organizations in a Frontier instance. It can be filtered by organization.";
    };
  }

  rpc GenerateInvoices(GenerateInvoicesRequest) returns (GenerateInvoicesResponse) {
    option (google.api.http) = {
      post: "/v1beta1/admin/billing/invoices/generate",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Invoice";
      summary: "Trigger invoice generation";
      description: "Triggers the creation of credit overdraft invoices for all billing accounts.";
    };
  }

  rpc ListAllBillingAccounts(ListAllBillingAccountsRequest) returns (ListAllBillingAccountsResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/billing/accounts"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Billing";
      summary: "List all billing accounts";
      description: "Lists all the billing accounts from all the organizations in a Frontier instance. It can be filtered by organization.";
    };
  }

  // Usage
  rpc RevertBillingUsage(RevertBillingUsageRequest) returns (RevertBillingUsageResponse) {
    option (google.api.http) = {
      post: "/v1beta1/admin/organizations/{org_id}/billing/{billing_id}/usage/{usage_id}/revert",
      body: "*"
      additional_bindings {
        post: "/v1beta1/organizations/billing/usages/revert",
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Billing";
      summary: "Revert billing usage";
      description: "Revert billing usage for a billing account.";
    };
  }

  // Webhooks
  rpc CreateWebhook(CreateWebhookRequest) returns (CreateWebhookResponse) {
    option (google.api.http) = {
      post: "/v1beta1/admin/webhooks",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Webhook";
      summary: "Create webhook";
      description: "Create a new webhook.";
    };
  }

  rpc UpdateWebhook(UpdateWebhookRequest) returns (UpdateWebhookResponse) {
    option (google.api.http) = {
      put: "/v1beta1/admin/webhooks/{id}",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Webhook";
      summary: "Update webhook";
      description: "Update a webhook.";
    };
  }

  rpc DeleteWebhook(DeleteWebhookRequest) returns (DeleteWebhookResponse) {
    option (google.api.http) = {delete: "/v1beta1/admin/webhooks/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Webhook";
      summary: "Delete webhook";
      description: "Delete a webhook.";
    };
  }

  rpc ListWebhooks(ListWebhooksRequest) returns (ListWebhooksResponse) {
    option (google.api.http) = {get: "/v1beta1/admin/webhooks"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Webhook";
      summary: "List webhooks";
      description: "List all webhooks.";
    };
  }

  // Billing Account
  rpc UpdateBillingAccountLimits(UpdateBillingAccountLimitsRequest) returns (UpdateBillingAccountLimitsResponse) {
    option (google.api.http) = {
      put: "/v1beta1/admin/organizations/{org_id}/billing/{id}/limits",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Billing";
      summary: "Update billing account limits";
      description: "Update billing account limits.";
    };
  }
}

message ListAllUsersRequest {
  int32 page_size = 1 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The maximum number of users to return per page. The default is 50."}
  ];
  int32 page_num = 2 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The page number to return. The default is 1."}
  ];
  string keyword = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The keyword to search for. It can be a user's name, email,metadata or id."}];
  string org_id = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization id to filter by."}];
  string group_id = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The group id to filter by."}];
  string state = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The state to filter by. It can be enabled or disabled."}];
}

message ListAllUsersResponse {
  int32 count = 1;
  repeated User users = 2;
}

message ListGroupsRequest {
  reserved 1;
  string org_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization id to filter by."}];
  string state = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The state to filter by. It can be enabled or disabled."}];
}

message ListGroupsResponse {
  repeated Group groups = 1;
}

message ListAllOrganizationsRequest {
  string user_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The user id to filter by."}];
  string state = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The state to filter by. It can be enabled or disabled."}];
  int32 page_size = 3 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The maximum number of organizations to return per page. The default is 50."}
  ];
  int32 page_num = 4 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The page number to return. The default is 1."}
  ];
}

message ListAllOrganizationsResponse {
  repeated Organization organizations = 1;
  int32 count = 2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Total number of records present"}
      ];
}

message ListProjectsRequest {
  string org_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization id to filter by."}];
  string state = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The state to filter by. It can be enabled or disabled."}];
}

message ListProjectsResponse {
  repeated Project projects = 1;
}

message ListRelationsRequest {
  string subject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The subject to filter by."}];
  string object = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The object to filter by."}];
}

message ListRelationsResponse {
  repeated Relation relations = 1;
}

message ListResourcesRequest {
  string user_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The user id to filter by."}];
  string project_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The project id to filter by."}];
  string organization_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization id to filter by."}];
  string namespace = 4 [
    (validate.rules).string.min_len = 3,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The namespace to filter by."}
  ];
}

message ListResourcesResponse {
  repeated Resource resources = 1;
}

message CreateRoleRequest {
  RoleRequestBody body = 1;
}

message CreateRoleResponse {
  Role role = 1;
}

message UpdateRoleRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The role id to update."}
  ];
  RoleRequestBody body = 2;
}

message UpdateRoleResponse {
  Role role = 1;
}

message DeleteRoleRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The role id to delete."}
  ];
}

message DeleteRoleResponse {}

message PermissionRequestBody {
  string name = 1 [
    deprecated = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The name of the permission. It should be unique across a Frontier instance and can contain only alphanumeric characters."}
  ];
  // namespace should be in service/resource format
  string namespace = 2 [
    deprecated = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The namespace of the permission. The namespace should be in service/resource format.<br/>*Example:*`compute/guardian`"}
  ];
  google.protobuf.Struct metadata = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The metadata object for permissions that can hold key value pairs."}];
  string title = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The title can contain any UTF-8 character, used to provide a human-readable name for the permissions. Can also be left empty."}];

  // key is composed of three parts, 'service.resource.verb'. Where 'service.resource' works as a namespace for the 'verb'.
  // Use this instead of using name and namespace fields
  string key = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Permission path key is composed of three parts, 'service.resource.verb'. Where 'service.resource' works as a namespace for the 'verb'. Namespace name cannot be `app` as it's reserved for core permissions.",
    example: "\"compute.instance.get\""
  }];
}

message CreatePermissionRequest {
  repeated PermissionRequestBody bodies = 1;
}

message CreatePermissionResponse {
  repeated Permission permissions = 1;
}

message UpdatePermissionRequest {
  string id = 1 [(google.api.field_behavior) = REQUIRED];
  PermissionRequestBody body = 2;
}

message UpdatePermissionResponse {
  Permission permission = 1;
}

message DeletePermissionRequest {
  string id = 1;
}

message DeletePermissionResponse {}

message ListPreferencesRequest {}

message ListPreferencesResponse {
  repeated Preference preferences = 1;
}

message CreatePreferencesRequest {
  repeated PreferenceRequestBody preferences = 1;
}

message CreatePreferencesResponse {
  repeated Preference preference = 1;
}

message CheckFederatedResourcePermissionRequest {
  string subject = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "the subject to check. <br/> *Example:* `user:..uuidofuser..`"}
  ];
  string resource = 2 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "`namespace:uuid` or `namespace:name` of the org or project, and `namespace:urn` of a resource under a project. In case of an org/project either provide the complete namespace (app/organization) or Frontier can also parse aliases for the same as `org` or `project`. <br/> *Example:* `organization:92f69c3a-334b-4f25-90b8-4d4f3be6b825` or `app/project:project-name` or `compute/instance:92f69c3a-334b-4f25-90b8-4d4f3be6b825`"}
  ];
  string permission = 3 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).string.pattern = "^[A-Za-z0-9._-]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "the permission name to check. <br/> *Example:* `get`, `list`, `compute.instance.create`"}
  ];
}

message CheckFederatedResourcePermissionResponse {
  bool status = 1;
}

message AddPlatformUserRequest {
  string user_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The user id to add to the platform."}];
  string serviceuser_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The service user id to add to the platform."}];

  string relation = 3 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The relation to add as in the platform. It can be admin or member."}
  ];
}

message AddPlatformUserResponse {}

message ListPlatformUsersRequest {}

message ListPlatformUsersResponse {
  repeated User users = 1;
  repeated ServiceUser serviceusers = 2;
}

message RemovePlatformUserRequest {
  string user_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The user id to remove from the the platform."}];
  string serviceuser_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The service user id to remove from the the platform."}];
}

message RemovePlatformUserResponse {}

message DelegatedCheckoutRequest {
  string org_id = 1 [(validate.rules).string.min_len = 3];
  // ID of the billing account to update the subscription for
  string billing_id = 2 [(validate.rules).string = {
    ignore_empty: true,
    uuid: true
  }];

  // Subscription to create
  CheckoutSubscriptionBody subscription_body = 10;
  // Product to buy
  CheckoutProductBody product_body = 11;
}

message DelegatedCheckoutResponse {
  // subscription if created
  Subscription subscription = 1;
  // product if bought
  Product product = 2;
}

message ListAllInvoicesRequest {
  string org_id = 1;
  int32 page_size = 2 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The maximum number of invoices to return per page. The default is 50."}
  ];
  int32 page_num = 3 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The page number to return. The default is 1."}
  ];
}

message ListAllInvoicesResponse {
  repeated Invoice invoices = 1;
  int32 count = 2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Total number of records present"}
  ];
}

message GenerateInvoicesRequest {}

message GenerateInvoicesResponse {}

message ListAllBillingAccountsRequest {
  string org_id = 1;
}

message ListAllBillingAccountsResponse {
  repeated BillingAccount billing_accounts = 1;
}

message RevertBillingUsageRequest {
  // either provide org_id or infer org from project_id
  string org_id = 1;
  string project_id = 2;

  // either provide billing_id of the org or API can infer the default
  // billing ID from either org_id or project_id, not both
  string billing_id = 3 [(validate.rules).string = {
    ignore_empty: true,
    uuid: true
  }];

  // usage id to revert, a usage can only be allowed to revert once
  string usage_id = 4 [(validate.rules).string = {uuid: true}];

  // amount should be equal or less than the usage amount
  int64 amount = 5 [(validate.rules).int64 = {gte: 0}];
}

message RevertBillingUsageResponse {}

message WebhookRequestBody {
  // URL to send the webhook to (valid absolute URI via RFC 3986)
  string url = 1 [(validate.rules).string = {uri: true}];
  string description = 2;
  // events to subscribe to, if empty all events are subscribed
  repeated string subscribed_events = 3;
  // headers to be sent with the webhook
  map<string, string> headers = 4;
  string state = 5 [(validate.rules).string = {
    ignore_empty: true,
    in: [
      "enabled",
      "disabled"
    ]
  }];

  google.protobuf.Struct metadata = 20;
}

message CreateWebhookRequest {
  WebhookRequestBody body = 1;
}

message CreateWebhookResponse {
  Webhook webhook = 1;
}

message UpdateWebhookRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The webhook id to update."},
    (validate.rules).string.uuid = true
  ];
  WebhookRequestBody body = 2;
}

message UpdateWebhookResponse {
  Webhook webhook = 1;
}

message DeleteWebhookRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The webhook id to delete."},
    (validate.rules).string.uuid = true
  ];
}

message DeleteWebhookResponse {}

message ListWebhooksRequest {}

message ListWebhooksResponse {
  repeated Webhook webhooks = 1;
}

message UpdateBillingAccountLimitsRequest {
  string org_id = 1 [(validate.rules).string = {min_len: 3}];
  string id = 2 [(validate.rules).string = {
    ignore_empty: true,
    uuid: true
  }];

  // credit_min is the minimum credit limit for the billing account
  // default is 0, negative numbers work as overdraft, positive
  // numbers work as minimum purchase limit
  int64 credit_min = 3;
}

message UpdateBillingAccountLimitsResponse {}