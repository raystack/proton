syntax = "proto3";

package raystack.optimus.core.v1beta1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/raystack/proton/optimus";
option java_multiple_files = true;
option java_outer_classname = "ProjectServiceManager";
option java_package = "org.raystack.proton.optimus";
// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {version: "0.1"};
  external_docs: {description: "Optimus Project Service"}
  schemes: HTTP;
  host: "127.0.0.1:9100";
  base_path: "/api";
};

service ProjectService {
  // RegisterProject creates a new optimus project
  rpc RegisterProject(RegisterProjectRequest) returns (RegisterProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/project"
      body: "*"
    };
  }
  // ListProjects returns list of registered projects and configurations
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {get: "/v1beta1/project"};
  }
  // GetProject returns project details based on project_name
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {get: "/v1beta1/project/{project_name}"};
  }
}

message RegisterProjectRequest {
  reserved 2;
  ProjectSpecification project = 1;
}

message RegisterProjectResponse {
  bool success = 1;
  string message = 2;
}

message ListProjectsRequest {}

message ListProjectsResponse {
  repeated ProjectSpecification projects = 1;
}

message GetProjectRequest {
  string project_name = 1;
}

message GetProjectResponse {
  ProjectSpecification project = 1;
}

message ProjectSpecification {
  string name = 1;
  map<string, string> config = 2;

  message ProjectSecret {
    string name = 1;
    string value = 2;
  }
  repeated ProjectSecret secrets = 3;
}
