syntax = "proto3";

package raystack.optimus.core.v1beta1;

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "raystack/optimus/core/v1beta1/job_spec.proto";

option go_package = "github.com/raystack/proton/optimus";
option java_multiple_files = true;
option java_outer_classname = "JobRunManager";
option java_package = "org.raystack.proton.optimus";
// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {version: "0.1"};
  external_docs: {description: "Optimus Job Run Service"}
  schemes: HTTP;
  host: "127.0.0.1:9100";
  base_path: "/api";
};

// todo: should this not be called, scheduler service, as this will also, manage the runtime functions , like airflow events
service JobRunService {
  // JobRunInput is used to fetch task/hook compiled configuration and assets.
  rpc JobRunInput(JobRunInputRequest) returns (JobRunInputResponse) {
    option (google.api.http) = {
      post: "/v1beta1/project/{project_name}/job/{job_name}/run_input"
      body: "*"
    };
  }
  // JobRun returns the current and past run status of jobs on a given range
  rpc JobRun(JobRunRequest) returns (JobRunResponse) {
    option (google.api.http) = {get: "/v1beta1/project/{project_name}/job/{job_name}/run"};
  }
  // RegisterJobEvent notifies optimus service about an event related to job
  rpc RegisterJobEvent(RegisterJobEventRequest) returns (RegisterJobEventResponse) {
    option (google.api.http) = {
      post: "/v1beta1/project/{project_name}/namespace/{namespace_name}/job/{job_name}/event"
      body: "*"
    };
  }
  // UploadToScheduler comiles jobSpec from database into DAGs and uploads the generated DAGs to scheduler
  rpc UploadToScheduler(UploadToSchedulerRequest) returns (UploadToSchedulerResponse) {
    option (google.api.http) = {
      put: "/v1beta1/project/{project_name}/upload"
      body: "*"
    };
  }
}

message UploadToSchedulerRequest {
  string project_name = 1;
  optional string namespace_name = 2;
}

message UploadToSchedulerResponse {
  bool status = 1;
  string error_message = 2;
}

message RegisterJobEventRequest {
  string project_name = 1;
  string job_name = 2;
  string namespace_name = 3;

  JobEvent event = 4;
}

message RegisterJobEventResponse {}

message JobRunInputRequest {
  reserved 3;

  string project_name = 1;
  string job_name = 2;
  google.protobuf.Timestamp scheduled_at = 4;

  string instance_name = 5;
  InstanceSpec.Type instance_type = 6;

  // either set job_name if this is a scheduled execution
  // or set jobrun_id if this is a manual triggered execution
  // and not really registered as a valid job
  string jobrun_id = 7;
}

message JobRunRequest {
  string project_name = 1;
  string job_name = 2;
  google.protobuf.Timestamp start_date = 3;
  google.protobuf.Timestamp end_date = 4;
  repeated string filter = 5;
}

message JobRunResponse {
  repeated JobRun job_runs = 1;
}

message InstanceSpec {
  reserved 2, 4;

  string state = 1;

  // deprecated
  // google.protobuf.Timestamp scheduled_at = 2;
  // deprecated
  // string job_name = 4;

  repeated InstanceSpecData data = 3;
  google.protobuf.Timestamp executed_at = 5;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_TASK = 1;
    TYPE_HOOK = 2;
  }
  string name = 6;
  Type type = 7;
}

message InstanceSpecData {
  reserved 3, 4;

  string name = 1;
  string value = 2;

  // type of data, could be an env var or file
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_ENV = 1;
    TYPE_FILE = 2;
  }
  Type type = 5;
}

message JobRunInputResponse {
  map<string, string> envs = 1;
  map<string, string> files = 2;
  map<string, string> secrets = 3;
}

message TaskWindow {
  google.protobuf.Duration size = 1;
  google.protobuf.Duration offset = 2;
  string truncate_to = 3;
}
