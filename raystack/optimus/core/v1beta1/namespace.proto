syntax = "proto3";

package raystack.optimus.core.v1beta1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/raystack/proton/optimus";
option java_multiple_files = true;
option java_outer_classname = "NamespaceServiceManager";
option java_package = "io.raystack.proton.optimus";
// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "0.1";
  };
  external_docs: {
    description: "Optimus Namespace Service";
  }
  schemes: HTTP;
  host: "127.0.0.1:9100";
  base_path: "/api";
};

service NamespaceService {
  // RegisterProjectNamespace creates a new namespace for a project
  rpc RegisterProjectNamespace(RegisterProjectNamespaceRequest) returns (RegisterProjectNamespaceResponse) {
    option (google.api.http) = {
      post: "/v1beta1/project/{project_name}/namespace"
      body: "*"
    };
  }

  // ListProjectNamespaces returns list of namespaces of a project
  rpc ListProjectNamespaces(ListProjectNamespacesRequest) returns (ListProjectNamespacesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/project/{project_name}/namespace"
    };
  }

  // GetNamespace returns namespace details based on project_name and namespace_name
  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse) {
    option (google.api.http) = {
      get: "/v1beta1/project/{project_name}/namespace/{namespace_name}"
    };
  }
}

message RegisterProjectNamespaceRequest {
  string project_name = 1;
  NamespaceSpecification namespace = 2;
}

message RegisterProjectNamespaceResponse {
  bool success = 1;
  string message = 2;
}

message ListProjectNamespacesRequest {
  string project_name = 1;
}

message ListProjectNamespacesResponse {
  repeated NamespaceSpecification namespaces = 1;
}

message GetNamespaceRequest {
  string project_name = 1;
  string namespace_name = 2;
}

message GetNamespaceResponse {
  NamespaceSpecification namespace = 1;
}

message NamespaceSpecification {
  string name = 1;
  map<string, string> config = 2;
}
