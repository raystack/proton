syntax = "proto3";

package raystack.assets.v1beta2;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "raystack/assets/v1beta2/common.proto";

option go_package = "github.com/raystack/proton/assets/v1beta2;assetsv1beta2";
option java_outer_classname = "AssetsProto";
option java_package = "io.raystack.assets";

// Asset is a resource that represents any type of asset.
message Asset {
  // The unique identifier of the asset.
  // Example: `user:jdoe` or `group:accounting`.
  string urn = 1;

  // The name of the asset.
  // Example: `John Doe` or `Accounting`.
  string name = 2;

  // The source of the asset.
  // Example: `github` or `bigquery`.
  string service = 3;

  // The type of the asset.
  // Example: `user` or `group`.
  string type = 4;

  // The REST URL for accessing the resource. URL returns the resource itself.
  // Example: `https://xyz.com/v1/users/user-123`
  string url = 5;

  // The description of the resource.
  // Example: `This resource is being used for storing important number`
  string description = 6;

  // Represents Data in asset, can be of type bucket, dashboard, group ... user
  google.protobuf.Any data = 7;

  // The ownership of the job.
  // For an example check out Owner.
  repeated raystack.assets.v1beta2.Owner owners = 31;

  // The lineage of the job.
  // For an example check out lineage schema.
  raystack.assets.v1beta2.Lineage lineage = 32;

  //Optional. List of labels the user has.
  map<string, string> labels = 33;

  // The timestamp of the generated event.
  // Event schemas is defined in the common event schema.
  raystack.assets.v1beta2.Event event = 100;

  // The timestamp when the asset was created.
  // This information is expected to be maintained by the system.
  google.protobuf.Timestamp create_time = 101;

  // The timestamp when the asset was last modified.
  // This information is expected to be maintained by the system.
  google.protobuf.Timestamp update_time = 102;
}
