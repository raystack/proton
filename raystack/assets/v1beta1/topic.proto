syntax = "proto3";

package raystack.assets.v1beta1;

import "raystack/assets/v1beta1/event.proto";
import "raystack/assets/v1beta1/resource.proto";
import "raystack/assets/v1beta1/timestamp.proto";
import "raystack/assets/v1beta1/lineage.proto";
import "raystack/assets/v1beta1/ownership.proto";
import "raystack/assets/v1beta1/properties.proto";
import "raystack/assets/v1beta1/schema.proto";

option go_package = "github.com/raystack/proton/assets/v1beta1;assetsv1beta1";
option java_outer_classname = "TopicProto";
option java_package = "io.raystack.assets";

// Topic is resource that represents a logical group of messages
// in message bus like kafka, pubsub, pulsar etc.
message Topic {
  // Representation of the resource
  raystack.assets.v1beta1.Resource resource = 1;

  // The metrics of the topic.
  // For an example check out topic profile schema.
  TopicProfile profile = 21;

  // The schama of the topic.
  // For an example check out topic schema.
  raystack.assets.v1beta1.TopicSchema schema = 31;

  // The ownership of the topic.
  // For an example check out ownership.
  raystack.assets.v1beta1.Ownership ownership = 32;

  // The lineage of the topic.
  // For an example check out lineage schema.
  raystack.assets.v1beta1.Lineage lineage = 33;

  // List of the user's custom properties.
  // Properties facet can be used to set custom properties, tags and labels for a user.
  raystack.assets.v1beta1.Properties properties = 34;

  // The timestamp of the user's creation.
  // Timstamp facet can be used to set the creation and updation timestamp of a user.
  raystack.assets.v1beta1.Timestamp timestamps = 35;

  // The timestamp of the generated event.
  // Event schemas is defined in the common event schema.
  raystack.assets.v1beta1.Event event = 100;
}

// TopicProfile is the profile of the topic.
message TopicProfile {
  // The thrroughput of the topic.
  // Example: `1m/minute`.
  string throughput = 1;

  // The number of partitions in the topic.
  // Example: `12`.
  int64 number_of_partitions = 2;
}
