syntax = "proto3";

package raystack.shield.v1beta1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "raystack/shield/v1beta1/models.proto";
import "validate/validate.proto";

option go_package = "github.com/raystack/proton/shield/v1beta1;shieldv1beta1";
option java_outer_classname = "Shield";
option java_package = "io.raystack.proton.shield.v1beta1";
// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Shield General APIs",
    version: "0.2.0";
  };
  schemes: HTTP;
  tags: [
    {name: "User"},
    {
      name: "Group";
      description: "Groups in Shield are used to manage users and their access to resources. Each group has a unique name and id that can be used to grant access to resources. When a user is added to a group, they inherit the access permissions that have been granted to the group. This allows you to manage access to resources at scale, without having to grant permissions to individual users."
    },
    {name: "Role"},
    {name: "Organization"},
    {name: "Project"},
    {name: "Policy"},
    {name: "Relation"},
    {name: "Permission"},
    {name: "Namespace"},
    {name: "Resource"},
    {
      name: "Authz";
      description: "Authorization APIs"
    },
    {
      name: "Authn";
      description: "Authentication APIs"
    },
    {
      name: "MetaSchema";
      description: "Manage Metadata Schemas which are used to validate metadata object while creating user/org/group/role. Shield automatically generates default metaschemas with `label` and `description` fields. You can also update these metaschemas to add/edit more fields."
    }
  ];
  consumes: "application/json";
  produces: "application/json";
  host: "127.0.0.1:7400";
  responses: {
    key: "200";
    value: {
      description: "OK - A successful response.";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "400";
    value: {
      description: "Bad Request - The request was malformed or contained invalid parameters.";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "401";
    value: {
      description: "Unauthorized - Authentication is required";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Forbidden - User does not have permission to access the resource";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Not Found - The requested resource was not found";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  responses: {
    key: "500";
    value: {
      description: "Internal Server Error. Returned when theres is something wrong with Shield server.";
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
      }
    }
  }
  security_definitions: {
    security: {
      key: "Basic";
      value: {
        type: TYPE_BASIC;
        in: IN_HEADER;
        name: "Basic Authentication";
        description: "Client ID/Secret authentication";
      }
    }
  }
  security: {
    security_requirement: {key: "Basic"}
  }
};
service ShieldService {
  // Users
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {get: "/v1beta1/users"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "List public users";
      description: "Returns the users from all the organizations in a Shield instance. It can be filtered by keyword, organization, group and state. Additionally you can include page number and page size for pagination."
    };
  }

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/users",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Create user";
      description: "Create a user with the given details. A user is not attached to an organization or a group by default,and can be invited to the org/group. The name of the user must be unique within the entire Shield instance. If a user name is not provided, Shield automatically generates a name from the user email. The user metadata is validated against the user metaschema. By default the user metaschema contains `labels` and `descriptions` for the user. The `title` field can be optionally added for a user-friendly name. <br/><br/>*Example:*`{\"email\":\"john.doe@raystack.org\",\"title\":\"John Doe\",metadata:{\"label\": {\"key1\": \"value1\"}, \"description\": \"User Description\"}}`";
      security:{};
    };
  }

  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {get: "/v1beta1/users/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get user";
      description: "Get a user by id searched over all organizations in Shield.";
    };
  }

  rpc ListUserGroups(ListUserGroupsRequest) returns (ListUserGroupsResponse) {
    option (google.api.http) = {get: "/v1beta1/users/{id}/groups"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "List user groups";
      description: "Lists all the groups a user belongs to across all organization in Shield. To get the groups of a user in a specific organization, use the org_id filter in the query parameter.";
    };
  }

  rpc ListCurrentUserGroups(ListCurrentUserGroupsRequest) returns (ListCurrentUserGroupsResponse) {
    option (google.api.http) = {get: "/v1beta1/users/self/groups"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "List my groups";
    };
  }

  rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserResponse) {
    option (google.api.http) = {get: "/v1beta1/users/self"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get current user";
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1beta1/users/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Update user";
    };
  }

  rpc UpdateCurrentUser(UpdateCurrentUserRequest) returns (UpdateCurrentUserResponse) {
    option (google.api.http) = {
      put: "/v1beta1/users/self",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Update current user";
    };
  }

  rpc EnableUser(EnableUserRequest) returns (EnableUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/users/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Enable user";
      description: "Sets the state of the user as enabled. The user will be able to log in and access the Shield instance."
    };
  }

  rpc DisableUser(DisableUserRequest) returns (DisableUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/users/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Disable user";
      description: "Sets the state of the user as diabled.The user's membership to groups and organizations will still exist along with all it's roles for access control, but the user will not be able to log in and access the Shield instance."
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {delete: "/v1beta1/users/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Delete user";
      description: "Delete an user permanently forever and all of its relations (organizations, groups, etc)";
    };
  }

  rpc GetOrganizationsByUser(GetOrganizationsByUserRequest) returns (GetOrganizationsByUserResponse) {
    option (google.api.http) = {get: "/v1beta1/users/{id}/organizations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get user organizations"
      description: "Get all the organizations a user belongs to.";
    };
  }

  rpc GetOrganizationsByCurrentUser(GetOrganizationsByCurrentUserRequest) returns (GetOrganizationsByCurrentUserResponse) {
    option (google.api.http) = {get: "/v1beta1/users/self/organizations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get my organizations"
      description: "Get all organizations the current user belongs to";
    };
  }

  rpc ListUserInvitations(ListUserInvitationsRequest) returns (ListUserInvitationsResponse) {
    option (google.api.http) = {get: "/v1beta1/users/{id}/invitations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "List user invitations";
      description: "List all the invitations sent to a user.";
    };
  }

  // ServieUser
  rpc ListServiceUsers(ListServiceUsersRequest) returns (ListServiceUsersResponse) {
    option (google.api.http) = {get: "/v1beta1/serviceusers"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "List org service users";
      description: "Returns the service user of an organization in a Shield instance. It can be filter by it's state"
    };
  }

  rpc CreateServiceUser(CreateServiceUserRequest) returns (CreateServiceUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/serviceusers",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "Create service user";
      description: "Create a service user.";
    };
  }

  rpc GetServiceUser(GetServiceUserRequest) returns (GetServiceUserResponse) {
    option (google.api.http) = {get: "/v1beta1/serviceusers/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "Get service user";
      description: "Get service user details by its id.";
    };
  }

  rpc DeleteServiceUser(DeleteServiceUserRequest) returns (DeleteServiceUserResponse) {
    option (google.api.http) = {delete: "/v1beta1/serviceusers/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "Delete service user";
      description: "Delete a service user permanently and all of its relations (keys, organizations, roles, etc)";
    };
  }

  rpc CreateServiceUserKey(CreateServiceUserKeyRequest) returns (CreateServiceUserKeyResponse) {
    option (google.api.http) = {
      post: "/v1beta1/serviceusers/{id}/keys",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "Create service user key";
      description: "Generate a service user key and return it, the private key part of the response will not be persisted and should be kept securely by client.";
    };
  }

  rpc ListServiceUserKeys(ListServiceUserKeysRequest) returns (ListServiceUserKeysResponse) {
    option (google.api.http) = {get: "/v1beta1/serviceusers/{id}/keys"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "List service user keys";
      description: "List all the keys of a service user with its details except jwk.";
    };
  }

  rpc GetServiceUserKey(GetServiceUserKeyRequest) returns (GetServiceUserKeyResponse) {
    option (google.api.http) = {get: "/v1beta1/serviceusers/{id}/keys/{key_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "Get service user key";
      description: "Get a service user public RSA JWK set.";
    };
  }

  rpc DeleteServiceUserKey(DeleteServiceUserKeyRequest) returns (DeleteServiceUserKeyResponse) {
    option (google.api.http) = {delete: "/v1beta1/serviceusers/{id}/keys/{key_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "Delete service user key";
      description: "Delete a service user key permanently.";
    };
  }

  rpc CreateServiceUserSecret(CreateServiceUserSecretRequest) returns (CreateServiceUserSecretResponse) {
    option (google.api.http) = {
      post: "/v1beta1/serviceusers/{id}/secrets",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "Create service user secret";
      description: "Generate a service user secret and return it. The secret value will not be persisted and should be securely stored by client.";
    };
  }

  rpc ListServiceUserSecrets(ListServiceUserSecretsRequest) returns (ListServiceUserSecretsResponse) {
    option (google.api.http) = {get: "/v1beta1/serviceusers/{id}/secrets"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "List service user secrets";
      description: "List all the secrets of a service user.";
    };
  }

  rpc DeleteServiceUserSecret(DeleteServiceUserSecretRequest) returns (DeleteServiceUserSecretResponse) {
    option (google.api.http) = {delete: "/v1beta1/serviceusers/{id}/secrets/{secret_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "ServiceUser";
      summary: "Delete service user secret";
      description: "Delete a service user secret credential.";
    };
  }

  // Group
  rpc ListOrganizationGroups(ListOrganizationGroupsRequest) returns (ListOrganizationGroupsResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{org_id}/groups"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "List organization groups";
      description: "Get all groups that belong to an organization. The results can be filtered by state which can be either be enabled or disabled.";
    };
  }

  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/groups",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Create group";
      description: "Create a new group in an organization which serves as a container for users. The group can be assigned roles and permissions and can be used to manage access to resources. Also a group can also be assigned to other groups.";
    };
  }

  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{org_id}/groups/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Get group";
    };
  }

  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {
      put: "/v1beta1/organizations/{org_id}/groups/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Update group";
    };
  }

  rpc ListGroupUsers(ListGroupUsersRequest) returns (ListGroupUsersResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{org_id}/groups/{id}/users"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "List group users";
      description: "Returns a list of users that belong to a group.";
    };
  }

  rpc AddGroupUsers(AddGroupUsersRequest) returns (AddGroupUsersResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/groups/{id}/users",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Add group user"
      description: "Adds a principle(user and service-users) to a group, existing users in the group will be ignored. A group can't have nested groups as members.";
    };
  }

  rpc RemoveGroupUser(RemoveGroupUserRequest) returns (RemoveGroupUserResponse) {
    option (google.api.http) = {delete: "/v1beta1/organizations/{org_id}/groups/{id}/users/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Remove group user";
      description: "Removes a principle(user and service-users) from a group. If the user is not in the group, the request will succeed but no changes will be made.";
    };
  }

  rpc EnableGroup(EnableGroupRequest) returns (EnableGroupResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/groups/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Enable group";
      description: "Sets the state of the group as enabled. The `enabled` flag is used to determine if the group can be used for access control."
    };
  }

  rpc DisableGroup(DisableGroupRequest) returns (DisableGroupResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/groups/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Disable group";
      description: "Sets the state of the group as disabled. The group will not be available for access control and the existing users in the group will not be able to access any resources that are assigned to the group. No other users can be added to the group while it is disabled."
    };
  }

  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {delete: "/v1beta1/organizations/{org_id}/groups/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Delete group";
      description: "Delete an organization group permanently and all of its relations";
    };
  }

  // Roles
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {get: "/v1beta1/roles"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "List platform roles";
      description: "Returns a list of platform wide roles available in enitre Shield instance along with their associated permissions";
    };
  }

  rpc ListOrganizationRoles(ListOrganizationRolesRequest) returns (ListOrganizationRolesResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{org_id}/roles"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "List organization roles"
      description: "Returns a list of custom roles created under an organization with their associated permissions";
    };
  }

  rpc CreateOrganizationRole(CreateOrganizationRoleRequest) returns (CreateOrganizationRoleResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/roles",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Create organization role";
      description: "Create a custom role under an organization. This custom role will only be available for assignment to the principles within the organization.";
    };
  }

  rpc GetOrganizationRole(GetOrganizationRoleRequest) returns (GetOrganizationRoleResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{org_id}/roles/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Get organization role"
      description: "Returns a custom role under an organization along with its associated permissions";
    };
  }

  rpc UpdateOrganizationRole(UpdateOrganizationRoleRequest) returns (UpdateOrganizationRoleResponse) {
    option (google.api.http) = {
      put: "/v1beta1/organizations/{org_id}/roles/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Update organization role";
      description: "Update a custom role under an organization. This custom role will only be available for assignment to the principles within the organization."
    };
  }

  rpc DeleteOrganizationRole(DeleteOrganizationRoleRequest) returns (DeleteOrganizationRoleResponse) {
    option (google.api.http) = {delete: "/v1beta1/organizations/{org_id}/roles/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Delete organization role";
      description: "Delete a custom role and all of its relations under an organization permanently.";
    };
  }

  // Organizations
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "List organizations";
      description: "Returns a list of organizations. It can be filtered by userID or organization state.";
    };
  }

  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Create organization";
    };
  }

  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get organization";
      description: "Get organization by ID or name";
    };
  }

  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      put: "/v1beta1/organizations/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Update organization";
      description: "Update organization by ID";
    };
  }

  rpc ListOrganizationProjects(ListOrganizationProjectsRequest) returns (ListOrganizationProjectsResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{id}/projects"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get organization projects"
      description: "Get all projects that belong to an organization";
    };
  }

  rpc ListOrganizationAdmins(ListOrganizationAdminsRequest) returns (ListOrganizationAdminsResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{id}/admins"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "List organization admins";
      description: "Returns a list admins of an organization";
    };
  }

  rpc ListOrganizationUsers(ListOrganizationUsersRequest) returns (ListOrganizationUsersResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{id}/users"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "List organization users";
    };
  }

  rpc AddOrganizationUsers(AddOrganizationUsersRequest) returns (AddOrganizationUsersResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{id}/users",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Add organization user";
      description: "Add a user to an organization. A user must exists in Shield before adding it to an org. This request will fail if the user doesn't exists";
    };
  }

  rpc RemoveOrganizationUser(RemoveOrganizationUserRequest) returns (RemoveOrganizationUserResponse) {
    option (google.api.http) = {delete: "/v1beta1/organizations/{id}/users/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Remove organization user";
      description: "Remove a user from an organization";
    };
  }

  rpc ListOrganizationServiceUsers(ListOrganizationServiceUsersRequest) returns (ListOrganizationServiceUsersResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{id}/serviceusers"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "List organization service users";
    };
  }

  rpc ListOrganizationInvitations(ListOrganizationInvitationsRequest) returns (ListOrganizationInvitationsResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{org_id}/invitations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "List pending invitations";
      description: "Returns all pending invitations queued for an organization";
    };
  }

  rpc CreateOrganizationInvitation(CreateOrganizationInvitationRequest) returns (CreateOrganizationInvitationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/invitations",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Invite user"
      description: "Invite users to an organization, if the user doesn't exists, it will be created and notified. Invitations expire in 7 days";
    };
  }

  rpc GetOrganizationInvitation(GetOrganizationInvitationRequest) returns (GetOrganizationInvitationResponse) {
    option (google.api.http) = {get: "/v1beta1/organizations/{org_id}/invitations/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get pending invitation";
      description: "Returns a pending invitation queued for an organization";
    };
  }

  rpc AcceptOrganizationInvitation(AcceptOrganizationInvitationRequest) returns (AcceptOrganizationInvitationResponse) {
    option (google.api.http) = {post: "/v1beta1/organizations/{org_id}/invitations/{id}/accept"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Accept pending invitation";
      description: "Accept pending invitation queued for an organization. The user will be added to the organization and groups defined in the invitation";
    };
  }

  rpc DeleteOrganizationInvitation(DeleteOrganizationInvitationRequest) returns (DeleteOrganizationInvitationResponse) {
    option (google.api.http) = {delete: "/v1beta1/organizations/{org_id}/invitations/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Delete pending invitation";
      description: "Delete a pending invitation queued for an organization";
    };
  }

  rpc EnableOrganization(EnableOrganizationRequest) returns (EnableOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Enable organization";
      description: "Sets the state of the organization as enabled. The existing users in the org will be able to access any organization resources."
    };
  }

  rpc DisableOrganization(DisableOrganizationRequest) returns (DisableOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Disable organization";
      description: "Sets the state of the organization as disabled. The existing users in the org will not be able to access any organization resources."
    };
  }

  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {delete: "/v1beta1/organizations/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Delete organization"
      description: "Delete an organization and all of its relations permanently. The organization users will not be deleted from Shield.";
    };
  }

  // Projects
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Create project";
    };
  }

  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {get: "/v1beta1/projects/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Get project";
      description: "Returns a project by ID";
    };
  }

  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      put: "/v1beta1/projects/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Update project";
      description: "Updates a project by ID";
    };
  }

  rpc ListProjectAdmins(ListProjectAdminsRequest) returns (ListProjectAdminsResponse) {
    option (google.api.http) = {get: "/v1beta1/projects/{id}/admins"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "List project admins"
      description: "Returns a collection of admins of a project";
    };
  }

  rpc ListProjectUsers(ListProjectUsersRequest) returns (ListProjectUsersResponse) {
    option (google.api.http) = {get: "/v1beta1/projects/{id}/users"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "List project users"
      description: "Returns a collection of users of a project. Filter by user permissions is supported.";
    };
  }

  rpc EnableProject(EnableProjectRequest) returns (EnableProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Enable project";
    };
  }

  rpc DisableProject(DisableProjectRequest) returns (DisableProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Disable project";
    };
  }

  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {delete: "/v1beta1/projects/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Delete Project"
      description: "Delete a project all of its relations permanently.";
    };
  }

  // Policies
  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse) {
    option (google.api.http) = {
      post: "/v1beta1/policies",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Create policy";
      description: "Creates a policy ";
    };
  }

  rpc GetPolicy(GetPolicyRequest) returns (GetPolicyResponse) {
    option (google.api.http) = {get: "/v1beta1/policies/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Get policy";
      description: "Returns a policy by ID";
    };
  }

  rpc UpdatePolicy(UpdatePolicyRequest) returns (UpdatePolicyResponse) {
    option (google.api.http) = {
      put: "/v1beta1/policies/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Update policy";
      description: "Updates a policy by ID";
    };
  }

  rpc DeletePolicy(DeletePolicyRequest) returns (DeletePolicyResponse) {
    option (google.api.http) = {delete: "/v1beta1/policies/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Delete Policy"
      description: "Delete a policy all of its relations permanently.";
    };
  }

  // Relations
  rpc CreateRelation(CreateRelationRequest) returns (CreateRelationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/relations",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "Create relation";
    };
  }

  rpc GetRelation(GetRelationRequest) returns (GetRelationResponse) {
    option (google.api.http) = {get: "/v1beta1/relations/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "Get relation";
      description: "Returns a relation by ID";
    };
  }

  rpc DeleteRelation(DeleteRelationRequest) returns (DeleteRelationResponse) {
    option (google.api.http) = {delete: "/v1beta1/relations/{relation}/object/{object}/subject/{subject}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "Delete relation";
      description: "Remove a subject having a relation from an object";
    };
  }

  // Permissions
  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    option (google.api.http) = {get: "/v1beta1/permissions"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Permission";
      summary: "Get all permissions";
    };
  }

  rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {
    option (google.api.http) = {get: "/v1beta1/permissions/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Permission";
      summary: "Get permission";
      description: "Returns a permission by ID";
    };
  }

  // Namespaces
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {
    option (google.api.http) = {get: "/v1beta1/namespaces"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Namespace";
      summary: "Get all namespaces";
      description: "Returns the list of all namespaces in a Shield instance";
    };
  }

  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse) {
    option (google.api.http) = {get: "/v1beta1/namespaces/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Namespace";
      summary: "Get namespace";
      description: "Returns a namespace by ID";
    };
  }

  // Resources
  rpc ListProjectResources(ListProjectResourcesRequest) returns (ListProjectResourcesResponse) {
    option (google.api.http) = {get: "/v1beta1/projects/{project_id}/resources"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Get all resources";
    };
  }

  rpc CreateProjectResource(CreateProjectResourceRequest) returns (CreateProjectResourceResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects/{project_id}/resources",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Create resource";
      description: "Creates a resource in a project";
    };
  }

  rpc GetProjectResource(GetProjectResourceRequest) returns (GetProjectResourceResponse) {
    option (google.api.http) = {get: "/v1beta1/projects/{project_id}/resources/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Get resource";
      description: "Returns a project resource by ID";
    };
  }

  rpc UpdateProjectResource(UpdateProjectResourceRequest) returns (UpdateProjectResourceResponse) {
    option (google.api.http) = {
      put: "/v1beta1/projects/{project_id}/resources/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Update resource";
      description: "Updates a resource in a project";
    };
  }

  rpc DeleteProjectResource(DeleteProjectResourceRequest) returns (DeleteProjectResourceResponse) {
    option (google.api.http) = {delete: "/v1beta1/projects/{project_id}/resources/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Delete resource";
      description: "Deletes a resource from a project permanently";
    };
  }

  // Authz
  rpc CheckResourcePermission(CheckResourcePermissionRequest) returns (CheckResourcePermissionResponse) {
    option (google.api.http) = {
      post: "/v1beta1/check",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authz";
      summary: "Check";
      description: "Returns true if a principal has required permissions to access a resource and false otherwise.<br/> Note the principal can be a user or a service account, and Shield will the credentials from the current logged in principal from the session cookie (if any), or the client id and secret (in case of service users) or the access token (in case of human user accounts).";
    };
  }

  // Authn
  rpc GetJWKs(GetJWKsRequest) returns (GetJWKsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/jwks"
      additional_bindings {get: "/.well-known/jwks.json"}
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authz";
      summary: "Get well known JWKs";
    };
  }

  rpc ListAuthStrategies(ListAuthStrategiesRequest) returns (ListAuthStrategiesResponse) {
    option (google.api.http) = {get: "/v1beta1/auth"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authn";
      summary: "List authentication strategies";
      description: "Returns a list of identity providers configured on an instance level in Shield. e.g Google, AzureAD, Github etc";
    };
  }

  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/register/{strategy_name}"
      additional_bindings {
        post: "/v1beta1/auth/register/{strategy_name}"
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authn";
      summary: "Authenticate with a strategy";
      description: "Authenticate a user with a strategy. By default, after successful authentication no operation will be performed to apply redirection in case of browsers, provide a url in the authenticate request body that will be used for redirection after authentication. Also set redirect as true for redirecting the user request to the redirect_url after successful authentication.";
    };
  }

  rpc AuthCallback(AuthCallbackRequest) returns (AuthCallbackResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/callback"
      additional_bindings {
        post: "/v1beta1/auth/callback"
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authn";
      summary: "Callback from a strategy";
      description: "Callback from a strategy. This is the endpoint where the strategy will redirect the user after successful authentication. This endpoint will be called with the code and state query parameters. The code will be used to get the access token from the strategy and the state will be used to get the return_to url from the session and redirect the user to that url.";
    };
  }

  rpc AuthToken(AuthTokenRequest) returns (AuthTokenResponse) {
    option (google.api.http) = {
      post: "/v1beta1/auth/token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authn";
      summary: "Generate access token by given credentials";
      description: "Access token can be generated by providing the credentials in the request body/header. The credentials can be client id and secret or service account generated key jwt. Use the generated access token in Authorization header to access the shield resources.";
    };
  }

  rpc AuthLogout(AuthLogoutRequest) returns (AuthLogoutResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/logout"
      additional_bindings {delete: "/v1beta1/auth/logout"}
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authn";
      summary: "Logout from a strategy";
      description: "";
    };
  }

  // MetaSchemas
  rpc ListMetaSchemas(ListMetaSchemasRequest) returns (ListMetaSchemasResponse) {
    option (google.api.http) = {get: "/v1beta1/meta/schemas"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "List metaschemas";
      description: "Returns a list of all metaschemas configured on an instance level in Shield. e.g user, project, organization etc";
    };
  }

  rpc CreateMetaSchema(CreateMetaSchemaRequest) returns (CreateMetaSchemaResponse) {
    option (google.api.http) = {
      post: "/v1beta1/meta/schemas",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Create metaschema";
      description: "Create a new metadata schema. The metaschema **name** must be unique within the entire Shield instance and can contain only alphanumeric characters, dashes and underscores. The metaschema **schema** must be a valid JSON schema.Please refer to https://json-schema.org/ to know more about json schema. <br/>*Example:* `{name:\"user\",schema:{\"type\":\"object\",\"properties\":{\"label\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}},\"description\":{\"type\":\"string\"}}}}`";
    };
  }

  rpc GetMetaSchema(GetMetaSchemaRequest) returns (GetMetaSchemaResponse) {
    option (google.api.http) = {get: "/v1beta1/meta/schemas/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Get metaschema";
      description: "Get a metadata schema by ID.";
    };
  }

  rpc UpdateMetaSchema(UpdateMetaSchemaRequest) returns (UpdateMetaSchemaResponse) {
    option (google.api.http) = {
      put: "/v1beta1/meta/schemas/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Update metaschema";
      description: "Update a metadata schema. Only `schema` field of a metaschema can be updated. The metaschema `schema` must be a valid JSON schema.Please refer to https://json-schema.org/ to know more about json schema. <br/>*Example:* `{name:\"user\",schema:{\"type\":\"object\",\"properties\":{\"label\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}},\"description\":{\"type\":\"string\"}}}}`";
    };
  }

  rpc DeleteMetaSchema(DeleteMetaSchemaRequest) returns (DeleteMetaSchemaResponse) {
    option (google.api.http) = {delete: "/v1beta1/meta/schemas/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Delete metaschema";
      description: "Delete a metadata schema permanently. Once deleted the metaschema won't be used to validate the metadata. For example, if a metaschema(with `label` and `description` fields) is used to validate the metadata of a user, then deleting the metaschema will not validate the metadata of the user and metadata field can contain any key-value pair(and say another field called `foo` can be inserted in a user's metadata).";
    };
  }

  // Audit logs
  rpc ListOrganizationAuditLogs(ListOrganizationAuditLogsRequest) returns (ListOrganizationAuditLogsResponse) {
    option (google.api.http) = {get: "/v1beta1/organization/{org_id}/auditlogs"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "AuditLog";
      summary: "List audit logs";
      description: "Returns a list of audit logs of an organization in Shield.";
    };
  }

  rpc CreateOrganizationAuditLogs(CreateOrganizationAuditLogsRequest) returns (CreateOrganizationAuditLogsResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organization/{org_id}/auditlogs",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "AuditLog";
      summary: "Create audit log";
      description: "Create new audit logs in a batch.";
    };
  }

  rpc GetOrganizationAuditLog(GetOrganizationAuditLogRequest) returns (GetOrganizationAuditLogResponse) {
    option (google.api.http) = {get: "/v1beta1/organization/{org_id}/auditlogs/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "AuditLog";
      summary: "Get audit log";
      description: "Get an audit log by ID.";
    };
  }
}

// Authentication

message GetJWKsRequest {}

// GetJWKsResponse is a valid JSON Web Key Set as specififed in rfc 7517
message GetJWKsResponse {
  repeated JSONWebKey keys = 1;
}

message AuthLogoutRequest {}

message AuthLogoutResponse {}

message AuthCallbackRequest {
  // strategy_name will not be set for oidc but can be utilized for methods like email magic links
  string strategy_name = 1;

  // for oidc & magic links
  string state = 2;
  string code = 3;
}

message AuthCallbackResponse {}

message AuthenticateRequest {
  string strategy_name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Name of the strategy to use for authentication.<br/> *Example:* `google`"}];

  // by default, location redirect header for starting authentication flow if applicable
  // will be skipped unless this is set to true, useful in browser
  bool redirect = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "If set to true, location header will be set for redirect"}];

  // by default, after successful authentication no operation will be performed
  // to apply redirection in case of browsers, provide a url that will be used
  // for redirection after authentication
  string return_to = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "URL to redirect after successful authentication.<br/> *Example:*`\"https://shield.example.com\"`"}];

  // email of the user for magic links
  string email = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Email of the user to authenticate. Used for magic links.<br/> *Example:*`example@acme.org`"}];
}

message AuthenticateResponse {
  string endpoint = 1;
  string state = 2;
}

message AuthStrategy {
  string name = 1;
  google.protobuf.Struct params = 2;
}

message ListAuthStrategiesRequest {}

message ListAuthStrategiesResponse {
  repeated AuthStrategy strategies = 1;
}

message AuthTokenRequest {
  // grant_type can be one of the following:
  // - client_credentials
  // - urn:ietf:params:oauth:grant-type:jwt-bearer
  string grant_type = 1;

  // client_id and client_secret are required for grant_type client_credentials
  string client_id = 2;
  string client_secret = 3;

  // assertion is required for grant_type urn:ietf:params:oauth:grant-type:jwt-bearer
  string assertion = 4;
}

message AuthTokenResponse {
  string access_token = 1;
  string token_type = 2;
}

message UserRequestBody {
  string name = 1 [
    (validate.rules).string.pattern = "^([a-zA-Z][a-zA-Z0-9-_]{3,64})?$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The name of the user. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores and must start with a letter. If not provided, Shield automatically generates a name from the user email. "}
  ];
  string email = 2 [
    (validate.rules).string.email = true,
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The email of the user. The email must be unique within the entire Shield instance.<br/>*Example:*`\"john.doe@raystack.org\"`"}
  ];
  google.protobuf.Struct metadata = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Metadata object for users that can hold key value pairs pre-defined in User Metaschema. The metadata object can be used to store arbitrary information about the user such as label, description etc. By default the user metaschema contains labels and descriptions for the user. Update the same to add more fields to the user metadata object. <br/>*Example:*`{\"label\": {\"key1\": \"value1\"}, \"description\": \"User Description\"}`"}];
  string title = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The title can contain any UTF-8 character, used to provide a human-readable name for the user. Can also be left empty. <br/>*Example:*`\"John Doe\"`"}];
}

message ListUsersRequest {
  int32 page_size = 1 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The maximum number of users to return per page. The default is 50."}
  ];
  int32 page_num = 2 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The page number to return. The default is 1."}
  ];
  string keyword = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The keyword to search for in name or email."}];
  string org_id = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization ID to filter users by."}];
  string group_id = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The group id to filter by."}];
  string state = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The state to filter by. It can be enabled or disabled."}];
}

message ListUsersResponse {
  int32 count = 1;
  repeated User users = 2;
}

message CreateUserRequest {
  UserRequestBody body = 1 [(validate.rules).message.required = true];
}

message CreateUserResponse {
  User user = 1;
}

message GetOrganizationsByUserRequest {
  string id = 1;
}

message GetOrganizationsByUserResponse {
  repeated Organization organizations = 1;
}

message GetOrganizationsByCurrentUserRequest {}

message GetOrganizationsByCurrentUserResponse {
  repeated Organization organizations = 1;
}

message EnableUserRequest {
  string id = 1;
}

message EnableUserResponse {}

message DisableUserRequest {
  string id = 1;
}

message DisableUserResponse {}

message DeleteUserRequest {
  string id = 1;
}

message DeleteUserResponse {}

message GetUserResponse {
  User user = 1;
}

message GetCurrentUserRequest {}

message GetCurrentUserResponse {
  User user = 1;
  ServiceUser serviceuser = 2;
}

message UpdateUserResponse {
  User user = 1;
}

message UpdateCurrentUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string id = 1;
  UserRequestBody body = 2;
}

message GetUserRequest {
  string id = 1;
}

message ListCurrentUserGroupsRequest {}

message ListCurrentUserGroupsResponse {
  repeated Group groups = 1;
}

message ListUserGroupsRequest {
  reserved 2;

  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the user to get groups for."}];
  string org_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization ID to filter groups by. If not provided, groups from all organizations are returned."}];
}

message ListUserGroupsResponse {
  repeated Group groups = 1;
}

message UpdateCurrentUserRequest {
  UserRequestBody body = 1;
}

message ListUserInvitationsRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The user email to list the invitations for."}];
}

message ListUserInvitationsResponse {
  repeated Invitation invitations = 1;
}

// Serviceuser

message ListServiceUsersRequest {
  string org_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization ID to filter service users by."}
  ];
  string state = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The state to filter by. It can be enabled or disabled."}];
}

message ListServiceUsersResponse {
  repeated ServiceUser serviceusers = 1;
}

message ServiceUserRequestBody {
  string title = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "User friendly name of the service user.",
    example: "\"Order Service\""
  }];
  google.protobuf.Struct metadata = 2;
}

message CreateServiceUserRequest {
  ServiceUserRequestBody body = 1;
  string org_id = 2 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization ID to which the service user belongs to."}
  ];
}

message CreateServiceUserResponse {
  ServiceUser serviceuser = 1;
}

message GetServiceUserRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to get."}];
}

message GetServiceUserResponse {
  ServiceUser serviceuser = 1;
}

message UpdateServiceUserRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to update."}];
  ServiceUserRequestBody body = 2;
}

message UpdateServiceUserResponse {
  ServiceUser serviceuser = 1;
}

message DeleteServiceUserRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to delete."}];
  string org_id = 2;
}

message DeleteServiceUserResponse {}

message CreateServiceUserKeyRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to create a key for."}];
  string title = 2;
}

message CreateServiceUserKeyResponse {
  KeyCredential key = 1;
}

message GetServiceUserKeyRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to get a key for."}];
  string key_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the key to get."}];
}

message GetServiceUserKeyResponse {
  repeated JSONWebKey keys = 1;
}

message ListServiceUserKeysRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to list keys for."}];
}

message ListServiceUserKeysResponse {
  repeated ServiceUserKey keys = 1;
}

message DeleteServiceUserKeyRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to delete a key for."}];
  string key_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the key to delete."}];
}

message DeleteServiceUserKeyResponse {}

message CreateServiceUserSecretRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to create a key for."}];
  string title = 2;
}

message CreateServiceUserSecretResponse {
  SecretCredential secret = 1;
}

message ListServiceUserSecretsRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to list secrets for."}];
}

message ListServiceUserSecretsResponse {
  // secrets will be listed without the secret value
  repeated SecretCredential secrets = 1;
}

message DeleteServiceUserSecretRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the service user to delete a secret for."}];
  string secret_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The unique ID of the secret to delete."}];
}

message DeleteServiceUserSecretResponse {}

// Organization

message ListOrganizationGroupsRequest {
  reserved 1;
  string org_id = 2 [(validate.rules).string = {
    pattern: "^[A-Za-z0-9_-]+$",
    min_len: 3
  }];
  string state = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The state of the group to filter by. It can be enabled or disabled."}];
}

message ListOrganizationGroupsResponse {
  repeated Group groups = 1;
}

message CreateOrganizationRoleRequest {
  RoleRequestBody body = 1;
  string org_id = 2 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization ID to which the role belongs to."}
  ];
}

message CreateOrganizationRoleResponse {
  Role role = 1;
}

message GetOrganizationRoleRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message GetOrganizationRoleResponse {
  Role role = 1;
}

message UpdateOrganizationRoleRequest {
  string id = 1;
  string org_id = 3;
  RoleRequestBody body = 2;
}

message UpdateOrganizationRoleResponse {
  Role role = 1;
}

message ListRolesRequest {
  string state = 1;
}

message ListRolesResponse {
  repeated Role roles = 1;
}

message ListOrganizationRolesRequest {
  string org_id = 1 [(validate.rules).string.min_len = 3];
  string state = 2;
}

message ListOrganizationRolesResponse {
  repeated Role roles = 1;
}

message DeleteOrganizationRoleRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message DeleteOrganizationRoleResponse {}

message OrganizationRequestBody {
  string name = 1 [
    (validate.rules).string.pattern = "^[A-Za-z0-9-_]+$",
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The name of the organization. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores.<br/>*Example:*`\"shield-org1-acme\"`"}
  ];
  string title = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The title can contain any UTF-8 character, used to provide a human-readable name for the organization. Can also be left empty.<br/> *Example*: `\"Acme Inc\"`"}];
  google.protobuf.Struct metadata = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Metadata object for organizations that can hold key value pairs defined in Organization Metaschema. The metadata object can be used to store arbitrary information about the organization such as labels, descriptions etc. The default Organization Metaschema contains labels and descripton fields. Update the Organization Metaschema to add more fields. <br/>*Example*:`{\"labels\": {\"key\": \"value\"}, \"description\": \"Organization description\"}`"}];
}

message ListOrganizationsRequest {
  string user_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The user ID to filter by. It can be used to list all the organizations that the user is a member of. Otherwise, all the organizations in the Shield instance will be listed."}];
  string state = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The state to filter by. It can be `enabled` or `disabled`."}];
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
}

message CreateOrganizationRequest {
  OrganizationRequestBody body = 1;
}

message CreateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationRequest {
  string id = 1;
}

message UpdateOrganizationRequest {
  string id = 1;
  OrganizationRequestBody body = 2;
}

message ListOrganizationAdminsRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
}

message ListOrganizationAdminsResponse {
  repeated User users = 1;
}

message ListOrganizationUsersRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string permission_filter = 2 [deprecated = true];
}

message ListOrganizationUsersResponse {
  repeated User users = 1;
}

message AddOrganizationUsersRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  repeated string user_ids = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of user IDs to be added to the organization."}];
}

message AddOrganizationUsersResponse {}

message RemoveOrganizationUserRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string user_id = 2;
}

message RemoveOrganizationUserResponse {}

message ListOrganizationServiceUsersRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
}

message ListOrganizationServiceUsersResponse {
  repeated ServiceUser serviceusers = 1;
}

message ListOrganizationInvitationsRequest {
  string org_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "unique id of the organization to which user is invited"}
  ];
  string user_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "user_id filter is the email id of user who are invited inside the organization."}];
}

message ListOrganizationInvitationsResponse {
  repeated Invitation invitations = 1;
}

message CreateOrganizationInvitationRequest {
  string org_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "unique id of the organization to which user is invited"}
  ];
  string user_id = 2 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "user_id is email id of user who are invited inside the organization. If user is not registered on the platform, it will be notified"}
  ];
  repeated string group_ids = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "list of group ids to which user needs to be added as a member."}];
}

message CreateOrganizationInvitationResponse {
  Invitation invitation = 1;
}

message GetOrganizationInvitationRequest {
  string id = 1;
  string org_id = 2;
}

message GetOrganizationInvitationResponse {
  Invitation invitation = 1;
}

message AcceptOrganizationInvitationRequest {
  string id = 1;
  string org_id = 2;
}

message AcceptOrganizationInvitationResponse {}

message DeleteOrganizationInvitationRequest {
  string id = 1;
  string org_id = 2;
}

message DeleteOrganizationInvitationResponse {}

message EnableOrganizationRequest {
  string id = 1;
}

message EnableOrganizationResponse {}

message DisableOrganizationRequest {
  string id = 1;
}

message DisableOrganizationResponse {}

message DeleteOrganizationRequest {
  string id = 1;
}

message DeleteOrganizationResponse {}

// Project

message ProjectRequestBody {
  string name = 1 [
    (validate.rules).string.pattern = "^[A-Za-z0-9-_]+$",
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The name of the project. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores.<br/> *Example:* `shield-playground`"}
  ];
  string title = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The title can contain any UTF-8 character, used to provide a human-readable name for the project. Can also be left empty. <br/> *Example:* `Shield Playground`"}];
  google.protobuf.Struct metadata = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Metadata object for projects that can hold key value pairs defined in Project Metaschema."}];
  string org_id = 4 [
    (validate.rules).string.min_len = 3,
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "unique id of the organization to which project belongs"}
  ];
}

message CreateProjectRequest {
  ProjectRequestBody body = 1;
}

message CreateProjectResponse {
  Project project = 1;
}

message GetProjectResponse {
  Project project = 1;
}

message UpdateProjectResponse {
  Project project = 1;
}

message ListOrganizationProjectsRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string state = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Filter projects by state. If not specified, all projects are returned. <br/> *Possible values:* `enabled` or `disabled`"}];
}

message ListOrganizationProjectsResponse {
  repeated Project projects = 1;
}

message GetProjectRequest {
  string id = 1;
}

message UpdateProjectRequest {
  string id = 1;
  ProjectRequestBody body = 2;
}

message ListProjectAdminsRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
}

message ListProjectAdminsResponse {
  repeated User users = 1;
}

message ListProjectUsersRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string permission_filter = 2;
}

message ListProjectUsersResponse {
  repeated User users = 1;
}

message EnableProjectRequest {
  string id = 1;
}

message EnableProjectResponse {}

message DisableProjectRequest {
  string id = 1;
}

message DisableProjectResponse {}

message DeleteProjectRequest {
  string id = 1;
}

message DeleteProjectResponse {}

message PolicyRequestBody {
  string role_id = 1 [
    (validate.rules).string.min_len = 3,
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "unique id of the role to which policy is assigned"}
  ];
  string title = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The title can contain any UTF-8 character, used to provide a human-readable name for the policy. Can also be left empty. <br/> *Example:* `Policy title`"}];
  string resource = 2 [
    (validate.rules).string.min_len = 3,
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The resource to which policy is assigned in this format `namespace:uuid`. <br/> *Example:* `app/guardian:70f69c3a-334b-4f25-90b8-4d4f3be6b8e2`"}
  ];
  string principal = 4 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "principal is the user or group to which policy is assigned. The principal id must be prefixed with its namespace id in this format `namespace:uuid`. The namespace can be `app/user`, `app/group` or `app/serviceuser` (coming up!) and uuid is the unique id of the principal. <br/> *Example:* `app/user:92f69c3a-334b-4f25-90b8-4d4f3be6b825`"}
  ];
  google.protobuf.Struct metadata = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Metadata object for policies that can hold key value pairs defined in Policy Metaschema.<br/> *Example:* `{\"labels\": {\"key\": \"value\"}, \"description\": \"Policy description\"}`"}];
}

message GetPermissionRequest {
  string id = 1;
}

message GetPermissionResponse {
  Permission permission = 1;
}

message ListPermissionsRequest {}

message ListPermissionsResponse {
  repeated Permission permissions = 1;
}

message ListNamespacesRequest {}

message ListNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message GetNamespaceRequest {
  string id = 1;
}

message GetNamespaceResponse {
  Namespace namespace = 1;
}

message CreatePolicyRequest {
  PolicyRequestBody body = 1;
}

message CreatePolicyResponse {
  reserved 1;
  Policy policy = 2;
}

message GetPolicyRequest {
  string id = 1;
}

message GetPolicyResponse {
  Policy policy = 1;
}

message UpdatePolicyRequest {
  string id = 1;
  PolicyRequestBody body = 2;
}

message UpdatePolicyResponse {
  repeated Policy policies = 1;
}

message DeletePolicyRequest {
  string id = 1;
}

message DeletePolicyResponse {}

message RelationRequestBody {
  reserved 2, 5;

  // objectnamespace:uuid
  string object = 1;
  // subjectnamespace:uuid
  string subject = 3;
  string relation = 4;
  string subject_sub_relation = 6;
}

message CreateRelationRequest {
  RelationRequestBody body = 1;
}

message CreateRelationResponse {
  Relation relation = 1;
}

message GetRelationRequest {
  string id = 1;
}

message GetRelationResponse {
  Relation relation = 1;
}

message UpdateRelationRequest {
  string id = 1;
  RelationRequestBody body = 2;
}

message UpdateRelationResponse {
  Relation relation = 1;
}

// Group

message GroupRequestBody {
  reserved 4;
  string name = 1 [
    (validate.rules).string.pattern = "^[A-Za-z0-9-_]+$",
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The name of the group. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores."}
  ];
  string title = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The title can contain any UTF-8 character, used to provide a human-readable name for the group. Can also be left empty."}];
  google.protobuf.Struct metadata = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Metadata object for groups that can hold key value pairs defined in Group Metaschema. The metadata object can be used to store arbitrary information about the group such as labels, descriptions etc. The default Group Metaschema contains labels and descripton fields. Update the Group Metaschema to add more fields.<br/>*Example:*`{\"labels\": {\"key\": \"value\"}, \"description\": \"Group description\"}`"}];
}

message CreateGroupRequest {
  GroupRequestBody body = 1;
  string org_id = 2 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization ID to which the group belongs to."}
  ];
}

message GetGroupRequest {
  string id = 1;
  string org_id = 2;
}

message CreateGroupResponse {
  Group group = 1;
}

message GetGroupResponse {
  Group group = 1;
}

message UpdateGroupResponse {
  Group group = 1;
}

message UpdateGroupRequest {
  string id = 1;
  GroupRequestBody body = 2;
  string org_id = 3 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The organization ID to which the group belongs to."}
  ];
}

message ListGroupUsersRequest {
  string id = 1;
  string org_id = 2;
}

message ListGroupUsersResponse {
  repeated User users = 1;
}

message EnableGroupRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message EnableGroupResponse {}

message DisableGroupRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message DisableGroupResponse {}

message DeleteGroupRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message DeleteGroupResponse {}

message AddGroupUsersRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
  repeated string user_ids = 3;
}

message AddGroupUsersResponse {}

message RemoveGroupUserRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
  string user_id = 3;
}

message RemoveGroupUserResponse {}

message DeleteRelationRequest {
  reserved 3;

  // objectnamespace:uuid
  string object = 1;
  // subjectnamespace:uuid
  string subject = 2;
  string relation = 4;
}

message DeleteRelationResponse {}

// Project Resources

message ListProjectResourcesRequest {
  reserved 1;
  string project_id = 2 [(validate.rules).string.min_len = 3];
  string namespace = 4;
}

message ListProjectResourcesResponse {
  repeated Resource resources = 1;
}

message ResourceRequestBody {
  reserved 4, 5;
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The name of the resource.  Must be unique within the project. <br/> *Example:* `my-resource`"}
  ];
  string title = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The title can contain any UTF-8 character, used to provide a human-readable name for the resource. Can also be left empty."}
  ];
  string namespace = 3 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The namespace of the resource. The resource namespace are created when permissions for that resource is created in Shield. If namespace doesn't exists the request will fail. <br/> *Example:* `compute/instance`"}
  ];
  // format namespace:uuid or just uuid for user
  string principal = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "UserID or ServiceUserID that should be marked as owner of the resource. If not provided, the current logged in user will be made the resource owner. <br/> *Example:* `user:92f69c3a-334b-4f25-90b8-4d4f3be6b825`"}];
  google.protobuf.Struct metadata = 7;
}

message CreateProjectResourceRequest {
  ResourceRequestBody body = 1;
  // project uuid or name
  string project_id = 2;
  string id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Autogenerated if skipped."}];
}

message CreateProjectResourceResponse {
  Resource resource = 1;
}

message GetProjectResourceRequest {
  reserved 2;
  string id = 1;
  string project_id = 3 [(validate.rules).string.min_len = 3];
}

message GetProjectResourceResponse {
  Resource resource = 1;
}

message UpdateProjectResourceRequest {
  string id = 1;
  ResourceRequestBody body = 2;
  string project_id = 3;
}

message UpdateProjectResourceResponse {
  Resource resource = 1;
}

message DeleteProjectResourceRequest {
  string id = 1;
  string project_id = 3 [(validate.rules).string.min_len = 3];
}

message DeleteProjectResourceResponse {}

message CheckResourcePermissionRequest {
  string object_id = 1 [
    deprecated = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Deprecated. Use `resource` field instead."
    }
  ];
  string object_namespace = 2 [
    deprecated = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Deprecated. Use `resource` field instead."
    }
  ];
  string permission = 3 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).string.pattern = "^[A-Za-z0-9_-]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the permission name to check. <br/> *Example:* `get` or `list`"
    }
  ];
  string resource = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "`namespace:uuid` or `namespace:name` of the org or project, and `namespace:urn` of a resource under a project. In case of an org/project either provide the complete namespace (app/organization) or Shield can also parse aliases for the same as `org` or `project`. <br/> *Example:* `organization:92f69c3a-334b-4f25-90b8-4d4f3be6b825` or `app/project:project-name` or `compute/instance:92f69c3a-334b-4f25-90b8-4d4f3be6b825`";
    }
  ];
}

message CheckResourcePermissionResponse {
  bool status = 1;
}

// Metascema

message MetaSchemaRequestBody {
  string name = 1 [
    (validate.rules).string.pattern = "^[A-Za-z0-9-_]+$",
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The name of the metaschema. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores."}
  ];
  string schema = 2 [
    (validate.rules).string.min_len = 2,
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The schema of the metaschema. The schema must be a valid JSON schema.Please refer to https://json-schema.org/ to know more about json schema."}
  ];
}

message CreateMetaSchemaRequest {
  MetaSchemaRequestBody body = 1;
}

message CreateMetaSchemaResponse {
  MetaSchema metaschema = 1;
}

message GetMetaSchemaRequest {
  string id = 1;
}

message GetMetaSchemaResponse {
  MetaSchema metaschema = 1;
}

message UpdateMetaSchemaRequest {
  string id = 1;
  MetaSchemaRequestBody body = 2 [(validate.rules).message.required = true];
}

message UpdateMetaSchemaResponse {
  MetaSchema metaschema = 1;
}

message DeleteMetaSchemaRequest {
  string id = 1;
}

message DeleteMetaSchemaResponse {}

message ListMetaSchemasRequest {}

message ListMetaSchemasResponse {
  repeated MetaSchema metaschemas = 1;
}

// Audit logs

message ListOrganizationAuditLogsRequest {
  string org_id = 1 [(validate.rules).string.min_len = 3];

  string source = 5;
  string action = 6;
 
  // start_time and end_time are inclusive
  google.protobuf.Timestamp start_time = 10;
  google.protobuf.Timestamp end_time = 11;
}

message ListOrganizationAuditLogsResponse {
  repeated AuditLog logs = 1;
}

message CreateOrganizationAuditLogsRequest {
  string org_id = 1 [(validate.rules).string.min_len = 3];
  repeated AuditLog logs = 2 [(validate.rules).repeated.min_items = 1];
}

message CreateOrganizationAuditLogsResponse {}

message GetOrganizationAuditLogRequest {
  string org_id = 1 [(validate.rules).string.min_len = 3];
  string id = 2 [(validate.rules).string.min_len = 3];
}

message GetOrganizationAuditLogResponse {
  AuditLog log = 1;
}