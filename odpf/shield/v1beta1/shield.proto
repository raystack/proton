syntax = "proto3";

package odpf.shield.v1beta1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "odpf/shield/v1beta1/models.proto";

option go_package = "github.com/odpf/proton/shield/v1beta1;shieldv1beta1";
option java_outer_classname = "Shield";
option java_package = "io.odpf.proton.shield.v1beta1";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Shield General APIs",
    version: "0.2.0";
  };
  schemes: HTTP;
  tags: [
    {
      name: "User";
    },
    {
      name: "Group";
      description: "Groups in Shield are used to manage users and their access to resources. Each group has a unique name and id that can be used to grant access to resources. When a user is added to a group, they inherit the access permissions that have been granted to the group. This allows you to manage access to resources at scale, without having to grant permissions to individual users."
    },
    {
      name: "Role";
    },
    {
      name: "Organization";
    },
    {
      name: "Project";
    },
    {
      name: "Policy";
    },
    {
      name: "Relation";
    },
    {
      name: "Permission";
    },
    {
      name: "Namespace";
    },
    {
      name: "Resource";
    },
    {
      name: "Authz";
      description: "Authorization APIs"
    },
    {
      name: "Authn";
      description: "Authentication APIs"
    },
    {
      name: "MetaSchema";
      description: "Manage Metadata Schemas which are used to validate metadata object while creating user/org/group/role. Shield automatically generates default metaschemas with `label` and `description` fields. You can also update these metaschemas to add/edit more fields."
    }
  ];
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "200";
    value: {
      description: "OK - A successful response.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "400";
    value: {
      description: "Bad Request - The request was malformed or contained invalid parameters.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "401";
    value: {
      description: "Unauthorized - Authentication is required";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses:{
    key: "403";
    value: {
      description: "Forbidden - User does not have permission to access the resource";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Not Found - The requested resource was not found";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "500";
    value: {
      description: "Internal Server Error. Returned when theres is something wrong with Shield server.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
};
service ShieldService {
  // Users
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get all public users";
      description: "Returns the users from all the organizations in a Shield instance. It can be filtered by keyword, organization, group and state. Additionally you can include page number and page size for pagination."
    };
  }

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/users",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Create user";
      description: "Create a user with the given details. A user is not attached to an organization or a group by default,and can be invited to the org/group. The name of the user must be unique within the entire Shield instance. If a user name is not provided, Shield automatically generates a name from the user email. The user metadata is validated against the user metaschema. By default the user metaschema contains `labels` and `descriptions` for the user. The `title` field can be optionally added for a user-friendly name. <br/><br/>*Example:*`{\"email\":\"john.doe@odpf.io\",\"title\":\"John Doe\",metadata:{\"label\": {\"key1\": \"value1\"}, \"description\": \"User Description\"}}`";
    };
  }

  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get a user by id";
      description: "Get a user by id searched over all organizations in Shield.";
    };
  }

  rpc ListUserGroups(ListUserGroupsRequest) returns (ListUserGroupsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/{id}/groups",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "List Groups of a User";
      description: "Lists all the groups a user belongs to across all organization in Shield.";
    };
  }

  rpc ListCurrentUserGroups(ListCurrentUserGroupsRequest) returns (ListCurrentUserGroupsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/self/groups",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "List groups of a User";
    };
  }

  rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/self",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get current user";
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1beta1/users/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Update User by ID";
    };
  }

  rpc UpdateCurrentUser(UpdateCurrentUserRequest) returns (UpdateCurrentUserResponse) {
    option (google.api.http) = {
      put: "/v1beta1/users/self",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Update current User";
    };
  }

  rpc EnableUser(EnableUserRequest) returns (EnableUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/users/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Enable user";
      description: "Sets the state of the user as enabled. The user will be able to log in and access the Shield instance."
    };
  }

  rpc DisableUser(DisableUserRequest) returns (DisableUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/users/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Disable user";
      description: "Sets the state of the user as diabled.The user's membership to groups and organizations will still exist along with all it's roles for access control, but the user will not be able to log in and access the Shield instance."
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/users/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Delete user";
      description: "Delete an user permanently forever and all of its relations (organizations, groups, etc)";
    };
  }

  rpc GetOrganizationsByUser(GetOrganizationsByUserRequest) returns (GetOrganizationsByUserResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/{id}/organizations",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get Organizations by User"
      description: "Get all the organizations a user belongs to.";
    };
  }

  rpc GetOrganizationsByCurrentUser(GetOrganizationsByCurrentUserRequest) returns (GetOrganizationsByCurrentUserResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/self/organizations",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get My Organizations"
      description: "Get all organizations the current user belongs to";
    };
  }

  // Group
  rpc ListOrganizationGroups(ListOrganizationGroupsRequest) returns (ListOrganizationGroupsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/groups",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "List Organization Groups";
      description: "Get all groups that belong to an organization. It can be filtered by keyword, organization, group and state. Additionally you can include page number and page size for pagination.";
    };
  }

  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{body.org_id}/groups",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Create Group";
      description: "Create a new group in an organization which serves as a container for users. The group can be assigned roles and permissions and can be used to manage access to resources. Also a group can also be assigned to other groups.";
    };
  }

  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/groups/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Get group by ID";
    };
  }

  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {
      put: "/v1beta1/organizations/{body.org_id}/groups/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Update group by ID";
    };
  }

  rpc ListGroupUsers(ListGroupUsersRequest) returns (ListGroupUsersResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/groups/{id}/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Get all users for a group";
    };
  }

  rpc AddGroupUsers(AddGroupUsersRequest) returns (AddGroupUsersResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/groups/{id}/users",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Add users to a group, existing users will be ignored";
    };
  }

  rpc RemoveGroupUser(RemoveGroupUserRequest) returns (RemoveGroupUserResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/organizations/{org_id}/groups/{id}/users/{user_id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Remove user from a group";
    };
  }

  rpc EnableGroup(EnableGroupRequest) returns (EnableGroupResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/groups/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Enable a Group";
      description: "Sets the state of the group as enabled. The `enabled` flag is used to determine if the group can be used for access control."
    };
  }

  rpc DisableGroup(DisableGroupRequest) returns (DisableGroupResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/groups/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Disable a group";
      description: "Sets the state of the group as disabled. The group will not be available for access control and the existing users in the group will not be able to access any resources that are assigned to the group. No other users can be added to the group while it is disabled."
    };
  }

  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/organizations/{org_id}/groups/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Delete a group permanently and all of its relations";
    };
  }

  // Roles
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/roles",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "List all pre-defined roles";
      description: "Returns a collection of Shield predefined roles with their associated permissions";
    };
  }

  rpc ListOrganizationRoles(ListOrganizationRolesRequest) returns (ListOrganizationRolesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/roles",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Get custom roles under an org";
    };
  }

  rpc CreateOrganizationRole(CreateOrganizationRoleRequest) returns (CreateOrganizationRoleResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{body.org_id}/roles",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Create Role";
    };
  }

  rpc GetOrganizationRole(GetOrganizationRoleRequest) returns (GetOrganizationRoleResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/roles/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Get Role by ID";
    };
  }

  rpc UpdateOrganizationRole(UpdateOrganizationRoleRequest) returns (UpdateOrganizationRoleResponse) {
    option (google.api.http) = {
      put: "/v1beta1/organizations/{body.org_id}/roles/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Update Role by ID";
    };
  }

  rpc DeleteOrganizationRole(DeleteOrganizationRoleRequest) returns (DeleteOrganizationRoleResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/organizations/{org_id}/roles/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Delete a role permanently forever and all of its relations";
    };
  }

  // Organizations
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get all organization";
    };
  }

  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Create organization";
    };
  }

  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get organization by ID or slug";
    };
  }

  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      put: "/v1beta1/organizations/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Update organization by ID";
    };
  }

  rpc ListOrganizationProjects(ListOrganizationProjectsRequest) returns (ListOrganizationProjectsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{id}/projects",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get all projects that belong to an organization";
    };
  }

  rpc ListOrganizationAdmins(ListOrganizationAdminsRequest) returns (ListOrganizationAdminsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{id}/admins",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get all admins of an organization";
    };
  }

  rpc ListOrganizationUsers(ListOrganizationUsersRequest) returns (ListOrganizationUsersResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{id}/users",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "List organization users";
    };
  }

  rpc AddOrganizationUsers(AddOrganizationUsersRequest) returns (AddOrganizationUsersResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{id}/users",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Add a user to an organization";
    };
  }

  rpc RemoveOrganizationUser(RemoveOrganizationUserRequest) returns (RemoveOrganizationUserResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/organizations/{id}/users/{user_id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Remove a user to an organization";
    };
  }

  rpc EnableOrganization(EnableOrganizationRequest) returns (EnableOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Enable an Organization";
    };
  }

  rpc DisableOrganization(DisableOrganizationRequest) returns (DisableOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Disable an organization";
    };
  }

  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/organizations/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Delete an organization permanently forever and all of its relations";
    };
  }

  // Projects
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Create oroject";
    };
  }

  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Get oroject by ID";
    };
  }

  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      put: "/v1beta1/projects/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Update oroject by ID";
    };
  }

  rpc ListProjectAdmins(ListProjectAdminsRequest) returns (ListProjectAdminsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{id}/admins",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Get all Admins of a oroject";
    };
  }

  rpc ListProjectUsers(ListProjectUsersRequest) returns (ListProjectUsersResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{id}/users",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Get all users of a oroject";
    };
  }

  rpc EnableProject(EnableProjectRequest) returns (EnableProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Enable a oroject";
    };
  }

  rpc DisableProject(DisableProjectRequest) returns (DisableProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Disable a oroject";
    };
  }

  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/projects/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Delete a oroject permanently forever and all of its relations";
    };
  }

  // Policies
  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse) {
    option (google.api.http) = {
      post: "/v1beta1/policies",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Create policy";
    };
  }

  rpc GetPolicy(GetPolicyRequest) returns (GetPolicyResponse) {
    option (google.api.http) = {
      get: "/v1beta1/policies/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Get policy by ID";
    };
  }

  rpc UpdatePolicy(UpdatePolicyRequest) returns (UpdatePolicyResponse) {
    option (google.api.http) = {
      put: "/v1beta1/policies/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Update policy by ID";
    };
  }

  rpc DeletePolicy(DeletePolicyRequest) returns (DeletePolicyResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/policies/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Delete a policy permanently forever and all of its relations";
    };
  }

  // Relations
  rpc CreateRelation(CreateRelationRequest) returns (CreateRelationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/relations",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "Create Relation";
    };
  }

  rpc GetRelation(GetRelationRequest) returns (GetRelationResponse) {
    option (google.api.http) = {
      get: "/v1beta1/relations/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "Get Relation by ID";
    };
  }

  rpc DeleteRelation(DeleteRelationRequest) returns (DeleteRelationResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/relations/{relation}/object/{object}/subject/{subject}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "Remove a subject having a relation from an object";
    };
  }

  // Permissions
  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/permissions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Permission";
      summary: "Get all Permissions";
    };
  }

  rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {
    option (google.api.http) = {
      get: "/v1beta1/permissions/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Permission";
      summary: "Get permission by ID";
    };
  }

  // Namespaces
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/namespaces"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Namespace";
      summary: "Get all Namespaces";
    };
  }

  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse) {
    option (google.api.http) = {
      get: "/v1beta1/namespaces/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Namespace";
      summary: "Get a Namespaces";
    };
  }

  // Resources
  rpc ListProjectResources(ListProjectResourcesRequest) returns (ListProjectResourcesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{project_id}/resources"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Get all resources";
    };
  }

  rpc CreateProjectResource(CreateProjectResourceRequest) returns (CreateProjectResourceResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects/{body.project_id}/resources",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Create Resource";
    };
  }

  rpc GetProjectResource(GetProjectResourceRequest) returns (GetProjectResourceResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{project_id}/resources/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Get Resource by ID";
    };
  }

  rpc UpdateProjectResource(UpdateProjectResourceRequest) returns (UpdateProjectResourceResponse) {
    option (google.api.http) = {
      put: "/v1beta1/projects/{body.project_id}/resources/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Update Resource by ID";
    };
  }

  rpc DeleteProjectResource(DeleteProjectResourceRequest) returns (DeleteProjectResourceResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/projects/{project_id}/resources/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Delete a resource permanently forever";
    };
  }

  // Authz
  rpc CheckResourcePermission(CheckResourcePermissionRequest) returns (CheckResourcePermissionResponse) {
    option (google.api.http) = {
      post: "/v1beta1/check",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authz";
      summary: "check permission on a resource of an user";
    };
  }

  // Authn
  rpc ListAuthStrategies(ListAuthStrategiesRequest) returns (ListAuthStrategiesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authn";
      summary: "Get all authentication strategies";
      description: "Returns a list of identity providers configured on an instance level in Shield. e.g Google, AzureAD, Github etc";
    };
  }

  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/register/{strategy_name}"
      additional_bindings {
        post: "/v1beta1/auth/register/{strategy_name}"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authn";
      summary: "Authenticate with a strategy";
      description: "Authenticate a user with a strategy. By default, after successful authentication no operation will be performed to apply redirection in case of browsers, provide a url in the authenticate request body that will be used for redirection after authentication. Also set redirect as true for redirecting the user request to the redirect_url after successful authentication.";
    };
  }

  rpc AuthCallback(AuthCallbackRequest) returns (AuthCallbackResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/callback"
      additional_bindings {
        post: "/v1beta1/auth/callback"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authn";
      summary: "Callback from a strategy";
      description: "Callback from a strategy. This is the endpoint where the strategy will redirect the user after successful authentication. This endpoint will be called with the code and state query parameters. The code will be used to get the access token from the strategy and the state will be used to get the return_to url from the session and redirect the user to that url.";
    };
  }

  rpc AuthLogout(AuthLogoutRequest) returns (AuthLogoutResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/logout"
      additional_bindings {
        delete: "/v1beta1/auth/logout"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authn";
      summary: "Logout from a strategy";
      description: "";
    };
  }
  
  // MetaSchemas
  rpc ListMetaSchemas(ListMetaSchemasRequest) returns (ListMetaSchemasResponse) {
    option (google.api.http) = {
      get: "/v1beta1/meta/schemas"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Get all Metadata Schemas";
      description: "Returns a list of all metaschemas configured on an instance level in Shield. e.g user, project, organization etc";
    };
  }

  rpc CreateMetaSchema(CreateMetaSchemaRequest) returns (CreateMetaSchemaResponse) {
    option (google.api.http) = {
      post: "/v1beta1/meta/schemas",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Create Metadata Schema";
      description: "Create a new metadata schema. The metaschema **name** must be unique within the entire Shield instance and can contain only alphanumeric characters, dashes and underscores. The metaschema **schema** must be a valid JSON schema.Please refer to https://json-schema.org/ to know more about json schema. <br/>*Example:* `{name:\"user\",schema:{\"type\":\"object\",\"properties\":{\"label\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}},\"description\":{\"type\":\"string\"}}}}`";
    };
  }

  rpc GetMetaSchema(GetMetaSchemaRequest) returns (GetMetaSchemaResponse) {
    option (google.api.http) = {
      get: "/v1beta1/meta/schemas/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Get MetaSchema by ID";
      description: "Get a metadata schema by ID.";
    };
  }

  rpc UpdateMetaSchema(UpdateMetaSchemaRequest) returns (UpdateMetaSchemaResponse) {
    option (google.api.http) = {
      put: "/v1beta1/meta/schemas/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Update MetaSchema by ID";
      description: "Update a metadata schema. Only `schema` field of a metaschema can be updated. The metaschema `schema` must be a valid JSON schema.Please refer to https://json-schema.org/ to know more about json schema. <br/>*Example:* `{name:\"user\",schema:{\"type\":\"object\",\"properties\":{\"label\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}},\"description\":{\"type\":\"string\"}}}}`";
    };
  }

  rpc DeleteMetaSchema(DeleteMetaSchemaRequest) returns (DeleteMetaSchemaResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/meta/schemas/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Delete a MetaSchema permanently";
      description: "Delete a metadata schema permanently. Once deleted the metaschema won't be used to validate the metadata. For example, if a metaschema(with `label` and `description` fields) is used to validate the metadata of a user, then deleting the metaschema will not validate the metadata of the user and metadata field can contain any key-value pair(and say another field called `foo` can be inserted in a user's metadata).";
    };
  }

}

message AuthLogoutRequest {}

message AuthLogoutResponse {}

message AuthCallbackRequest{
  // strategy_name will not be set for oidc but can be utilized for methods like email magic links
  string strategy_name = 1;
  
  // for oidc
  string state = 2;
  string code = 3;
}

message AuthCallbackResponse{
}

message AuthenticateRequest {
  string strategy_name = 1 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Name of the strategy to use for authentication.<br/> *Example:* `google`",
    }
  ];

  // by default, location header for redirect if applicable
  // will be skipped unless this is set to true, useful in browser
  bool redirect = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "If set to true, location header will be set for redirect",
    }
  ];

  // by default, after successful authentication no operation will be performed
  // to apply redirection in case of browsers, provide a url that will be used
  // for redirection after authentication
  string return_to = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "URL to redirect after successful authentication.<br/> *Example:*`\"https://shield.example.com\"`",
    }
  ];
}

message AuthenticateResponse {
  string endpoint = 1;
}

message AuthStrategy {
  string name = 1;
  google.protobuf.Struct params = 2;
}

message ListAuthStrategiesRequest {}

message ListAuthStrategiesResponse {
  repeated AuthStrategy strategies = 1;
}

message UserRequestBody {
  string name = 1 [
    (validate.rules).string.pattern = "^([a-zA-Z][a-zA-Z0-9-_]{3,64})?$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the user. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores and must start with a letter. If not provided, Shield automatically generates a name from the user email. ";
    }
  ];
  string email = 2 [
    (validate.rules).string.email = true,
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The email of the user. The email must be unique within the entire Shield instance.<br/>*Example:*`\"john.doe@odpf.io\"`";
    }
  ];
  google.protobuf.Struct metadata = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Metadata object for users that can hold key value pairs pre-defined in User Metaschema. The metadata object can be used to store arbitrary information about the user such as label, description etc. By default the user metaschema contains labels and descriptions for the user. Update the same to add more fields to the user metadata object. <br/>*Example:*`{\"label\": {\"key1\": \"value1\"}, \"description\": \"User Description\"}`"
    }
  ];
  string title = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The title can contain any UTF-8 character, used to provide a human-readable name for the user. Can also be left empty. <br/>*Example:*`\"John Doe\"`"
    }
  ];
}

message ListUsersRequest {
  int32 page_size = 1 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The maximum number of users to return per page. The default is 50.";
    }
  ];
  int32 page_num = 2 [
    (validate.rules).int32 = {
      gte: 1,
      ignore_empty: true,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The page number to return. The default is 1.";
    }
  ];
  string keyword = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The keyword to search for in name or email.";
    }
  ];
  string org_id = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The organization ID to filter users by.";
    }
  ];
  string group_id = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The group id to filter by.";
    }
  ];
  string state = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The state to filter by. It can be enabled or disabled.";
    }
  ];
}

message ListUsersResponse {
  int32 count = 1;
  repeated User users = 2;
}

message CreateUserRequest {
  UserRequestBody body = 1 [(validate.rules).message.required = true];
}

message CreateUserResponse {
  User user = 1;
}


message GetOrganizationsByUserRequest {
  string id = 1;
}

message GetOrganizationsByUserResponse {
  repeated Organization organizations = 1;
}

message GetOrganizationsByCurrentUserRequest {}

message GetOrganizationsByCurrentUserResponse {
  repeated Organization organizations = 1;
}

message EnableUserRequest {
  string id = 1;
}

message EnableUserResponse {}

message DisableUserRequest {
  string id = 1;
}

message DisableUserResponse {}

message DeleteUserRequest {
  string id = 1;
}

message DeleteUserResponse {}

message GetUserResponse {
  User user = 1;
}

message GetCurrentUserRequest {}

message GetCurrentUserResponse {
  User user = 1;
}

message UpdateUserResponse {
  User user = 1;
}

message UpdateCurrentUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string id = 1;
  UserRequestBody body = 2;
}

message GetUserRequest {
  string id = 1;
}

message ListCurrentUserGroupsRequest {}

message ListCurrentUserGroupsResponse {
  repeated Group groups = 1;
}

message ListUserGroupsRequest {
  string id = 1;
  string role = 2;
}

message GroupRequestBody {
  string name = 1 [
  (validate.rules).string.pattern = "^[A-Za-z0-9-_]+$",
  (google.api.field_behavior) = REQUIRED,
  (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the group. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores.";
   }
  ];
  string title = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The title can contain any UTF-8 character, used to provide a human-readable name for the group. Can also be left empty."
    }
  ];
  google.protobuf.Struct metadata = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Metadata object for groups that can hold key value pairs defined in Group Metaschema. The metadata object can be used to store arbitrary information about the group such as labels, descriptions etc. The default Group Metaschema contains labels and descripton fields. Update the Group Metaschema to add more fields.<br/>*Example:*`{\"labels\": {\"key\": \"value\"}, \"description\": \"Group description\"}`";
    }
  ];
  string org_id = 4 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).string.min_len = 3,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The organization ID to which the group belongs to.";
    }
  ];
}

message CreateGroupRequest {
  GroupRequestBody body = 1;
}

message ListUserGroupsResponse {
  repeated Group groups = 1;
}

message CreateGroupResponse {
  Group group = 1;
}

message GetGroupResponse {
  Group group = 1;
}

message UpdateGroupResponse {
  Group group = 1;
}

message UpdateGroupRequest {
  string id = 1;
  GroupRequestBody body = 2;
}

message UpdateCurrentUserRequest {
  UserRequestBody body = 1;
}

message GetGroupRequest {
  string id = 1;
  string org_id = 2;
}

message ListOrganizationGroupsRequest {
  string user_id = 1 [deprecated = true];
  string org_id = 2 [(validate.rules).string = {pattern: "^[A-Za-z0-9_-]+$", min_len: 3}];
  string state = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The state to filter by. It can be enabled or disabled.";
    }
  ];
}

message ListOrganizationGroupsResponse {
  repeated Group groups = 1;
}

message CreateOrganizationRoleRequest {
  RoleRequestBody body = 1;
}

message CreateOrganizationRoleResponse {
  Role role = 1;
}

message GetOrganizationRoleRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message GetOrganizationRoleResponse {
  Role role = 1;
}

message UpdateOrganizationRoleRequest {
  string id = 1;
  RoleRequestBody body = 2;
}

message UpdateOrganizationRoleResponse {
  Role role = 1;
}

message ListRolesRequest {
  string state = 1;
}

message ListRolesResponse {
  repeated Role roles = 1;
}

message ListOrganizationRolesRequest {
  string org_id = 1 [(validate.rules).string.min_len = 3];
  string state = 2;
}

message ListOrganizationRolesResponse {
  repeated Role roles = 1;
}

message DeleteOrganizationRoleRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message DeleteOrganizationRoleResponse{}

message OrganizationRequestBody {
  string name = 1 [
    (validate.rules).string.pattern = "^[A-Za-z0-9-_]+$",
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the organization. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores.<br/>*Example:*`\"shield-org1-acme\"`";
    }
    ];
  string title = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The title can contain any UTF-8 character, used to provide a human-readable name for the organization. Can also be left empty.<br/> *Example*: `\"Acme Inc\"`";
    }
  ];
  google.protobuf.Struct metadata = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Metadata object for organizations that can hold key value pairs defined in Organization Metaschema. The metadata object can be used to store arbitrary information about the organization such as labels, descriptions etc. The default Organization Metaschema contains labels and descripton fields. Update the Organization Metaschema to add more fields. <br/>*Example*:`{\"labels\": {\"key\": \"value\"}, \"description\": \"Organization description\"}`";
    }
  ];
}

message ListOrganizationsRequest {
  string user_id = 1;
  string state = 2;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
}

message CreateOrganizationRequest {
  OrganizationRequestBody body = 1;
}

message CreateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationRequest {
  string id = 1;
}

message UpdateOrganizationRequest {
  string id = 1;
  OrganizationRequestBody body = 2;
}

message ListOrganizationAdminsRequest {
  string id = 1 [(validate.rules).string.min_len = 3]; 
}

message ListOrganizationAdminsResponse {
  repeated User users = 1;
}

message ListOrganizationUsersRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string permission_filter = 2;
}

message ListOrganizationUsersResponse {
  repeated User users = 1;
}

message AddOrganizationUsersRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  repeated string user_ids = 2;
}

message AddOrganizationUsersResponse {}

message RemoveOrganizationUserRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string user_id = 2;
}

message RemoveOrganizationUserResponse {}

message EnableOrganizationRequest {
  string id = 1;
}

message EnableOrganizationResponse {}

message DisableOrganizationRequest {
  string id = 1;
}

message DisableOrganizationResponse {}


message DeleteOrganizationRequest {
  string id = 1;
}

message DeleteOrganizationResponse {}

message ProjectRequestBody {
  string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9-_]+$"];
  string title = 2;
  google.protobuf.Struct metadata = 3;
  string org_id = 4 [(validate.rules).string.min_len = 3];
}

message CreateProjectRequest {
  ProjectRequestBody body = 1;
}

message CreateProjectResponse {
  Project project = 1;
}

message GetProjectResponse {
  Project project = 1;
}

message UpdateProjectResponse {
  Project project = 1;
}

message ListOrganizationProjectsRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string state = 2;
}

message ListOrganizationProjectsResponse {
  repeated Project projects = 1;
}

message GetProjectRequest {
  string id = 1;
}

message UpdateProjectRequest {
  string id = 1;
  ProjectRequestBody body = 2;
}

message ListProjectAdminsRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
}

message ListProjectAdminsResponse {
  repeated User users = 1;
}

message ListProjectUsersRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string permission_filter = 2;
}

message ListProjectUsersResponse {
  repeated User users = 1;
}

message EnableProjectRequest {
  string id = 1;
}

message EnableProjectResponse {}

message DisableProjectRequest {
  string id = 1;
}

message DisableProjectResponse {}

message DeleteProjectRequest {
  string id = 1;
}

message DeleteProjectResponse {}

message PolicyRequestBody {
  string role_id = 1;
  string title = 3;
  
  // namespace:uuid
  string resource = 2;
  // namespace:uuid
  string principal = 4;
  google.protobuf.Struct metadata = 5;
}

message GetPermissionRequest {
  string id = 1;
}

message GetPermissionResponse {
  Permission permission = 1;
}

message ListPermissionsRequest {}

message ListPermissionsResponse {
  repeated Permission permissions = 1;
}

message ListNamespacesRequest {}

message ListNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message GetNamespaceRequest {
  string id = 1;
}

message GetNamespaceResponse {
  Namespace namespace = 1;
}

message CreatePolicyRequest {
  PolicyRequestBody body = 1;
}

message CreatePolicyResponse {
  reserved 1;
  Policy policy = 2;
}

message GetPolicyRequest {
  string id = 1;
}

message GetPolicyResponse {
  Policy policy = 1;
}

message UpdatePolicyRequest {
  string id = 1;
  PolicyRequestBody body = 2;
}

message UpdatePolicyResponse {
  repeated Policy policies = 1;
}

message DeletePolicyRequest {
  string id = 1;
}

message DeletePolicyResponse {}

message RelationRequestBody {
  reserved 2, 5;

  // objectnamespace:uuid
  string object = 1;
  // subjectnamespace:uuid
  string subject = 3;
  string relation = 4;
  string subject_sub_relation = 6;
}

message CreateRelationRequest {
  RelationRequestBody body = 1;
}

message CreateRelationResponse {
  Relation relation = 1;
}

message GetRelationRequest {
  string id = 1;
}

message GetRelationResponse {
  Relation relation = 1;
}

message UpdateRelationRequest {
  string id = 1;
  RelationRequestBody body = 2;
}

message UpdateRelationResponse {
  Relation relation = 1;
}

message ListGroupUsersRequest {
  string id = 1;
  string org_id = 2;
}

message ListGroupUsersResponse {
  repeated User users = 1;
}

message EnableGroupRequest{
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message EnableGroupResponse{}

message DisableGroupRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message DisableGroupResponse {}

message DeleteGroupRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message DeleteGroupResponse {}

message AddGroupUsersRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
  repeated string user_ids = 3;
}

message AddGroupUsersResponse {}

message RemoveGroupUserRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
  string user_id = 3;
}

message RemoveGroupUserResponse {}

message DeleteRelationRequest {
  reserved 3;

  // objectnamespace:uuid
  string object = 1;
  // subjectnamespace:uuid
  string subject = 2;
  string relation = 4;
}

message DeleteRelationResponse {}

message ListProjectResourcesRequest {
  reserved 1;
  string project_id = 2 [(validate.rules).string.min_len = 3];
  string namespace = 4;
}

message ListProjectResourcesResponse {
  repeated Resource resources = 1;
}

message ResourceRequestBody {
  reserved 4, 5;
  string name = 1;
  string project_id = 2;
  string namespace = 3;
  string user_id = 6;
  google.protobuf.Struct metadata = 7;
}

message CreateProjectResourceRequest {
  ResourceRequestBody body = 1;
}

message CreateProjectResourceResponse {
  Resource resource = 1;
}

message GetProjectResourceRequest {
  reserved 2;
  string id = 1;
  string project_id = 3 [(validate.rules).string.min_len = 3];
}

message GetProjectResourceResponse {
  Resource resource = 1;
}

message UpdateProjectResourceRequest {
  string id = 1;
  ResourceRequestBody body = 2;
}

message UpdateProjectResourceResponse {
  Resource resource = 1;
}

message DeleteProjectResourceRequest {
  string id = 1;
  string project_id = 3 [(validate.rules).string.min_len = 3];
}

message DeleteProjectResourceResponse {}

message CheckResourcePermissionRequest {
  string object_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"
  ];
  string object_namespace = 2 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).string.pattern = "^[A-Za-z0-9_/-]+$"
  ];
  string permission = 3 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"
  ];
}

message CheckResourcePermissionResponse {
  bool status = 1;
}

message MetaSchemaRequestBody {
  string name = 1 [
    (validate.rules).string.pattern = "^[A-Za-z0-9-_]+$",
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the metaschema. The name must be unique within the entire Shield instance. The name can contain only alphanumeric characters, dashes and underscores.";
    }
  ];
  string schema = 2 [
    (validate.rules).string.min_len = 2,
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The schema of the metaschema. The schema must be a valid JSON schema.Please refer to https://json-schema.org/ to know more about json schema."
    }
  ];
}

message CreateMetaSchemaRequest{
  MetaSchemaRequestBody body = 1;
}

message CreateMetaSchemaResponse{
  MetaSchema metaschema = 1;
}

message GetMetaSchemaRequest{
  string id = 1;
}

message GetMetaSchemaResponse{
  MetaSchema metaschema = 1;
}

message UpdateMetaSchemaRequest{
  string id = 1;
  MetaSchemaRequestBody body = 2 [(validate.rules).message.required = true];
}

message UpdateMetaSchemaResponse{
  MetaSchema metaschema = 1;
}

message DeleteMetaSchemaRequest{
  string id = 1;
}

message DeleteMetaSchemaResponse{}

message ListMetaSchemasRequest{}

message ListMetaSchemasResponse{
  repeated MetaSchema metaschemas = 1;
}