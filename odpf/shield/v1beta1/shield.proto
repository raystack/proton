syntax = "proto3";

package odpf.shield.v1beta1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "odpf/shield/v1beta1/models.proto";

option go_package = "github.com/odpf/proton/shield/v1beta1;shieldv1beta1";
option java_outer_classname = "Shield";
option java_package = "io.odpf.proton.shield.v1beta1";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Shield General APIs",
    version: "0.2.0";
  };
  schemes: HTTP;
};
service ShieldService {
  // Users
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get all public users";
    };
  }

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/users",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Create user";
    };
  }

  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get a user by id";
    };
  }

  rpc ListUserGroups(ListUserGroupsRequest) returns (ListUserGroupsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/{id}/groups",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "List Groups of a User";
    };
  }

  rpc ListCurrentUserGroups(ListCurrentUserGroupsRequest) returns (ListCurrentUserGroupsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/self/groups",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "List groups of a User";
    };
  }

  rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/self",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get current user";
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1beta1/users/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Update User by ID";
    };
  }

  rpc UpdateCurrentUser(UpdateCurrentUserRequest) returns (UpdateCurrentUserResponse) {
    option (google.api.http) = {
      put: "/v1beta1/users/self",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Update current User";
    };
  }

  rpc EnableUser(EnableUserRequest) returns (EnableUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/users/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Enable a user";
    };
  }

  rpc DisableUser(DisableUserRequest) returns (DisableUserResponse) {
    option (google.api.http) = {
      post: "/v1beta1/users/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Disable a user";
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/users/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Delete an user permanently forever and all of its relations";
    };
  }

  rpc GetOrganizationsByUser(GetOrganizationsByUserRequest) returns (GetOrganizationsByUserResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/{id}/organizations",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get all organizations a user belongs to";
    };
  }

  rpc GetOrganizationsByCurrentUser(GetOrganizationsByCurrentUserRequest) returns (GetOrganizationsByCurrentUserResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/self/organizations",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "User";
      summary: "Get all organizations a user belongs to";
    };
  }

  // Group
  rpc ListOrganizationGroups(ListOrganizationGroupsRequest) returns (ListOrganizationGroupsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/groups",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Create Group";
    };
  }

  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{body.org_id}/groups",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Create Group";
    };
  }

  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/groups/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Get Group by ID";
    };
  }

  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {
      put: "/v1beta1/organizations/{body.org_id}/groups/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Update Group by ID";
    };
  }

  rpc ListGroupUsers(ListGroupUsersRequest) returns (ListGroupUsersResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/groups/{id}/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Get all users for a group";
    };
  }

  rpc EnableGroup(EnableGroupRequest) returns (EnableGroupResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/groups/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Enable a Group";
    };
  }

  rpc DisableGroup(DisableGroupRequest) returns (DisableGroupResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{org_id}/groups/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Disable a Group";
    };
  }

  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/organizations/{org_id}/groups/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Group";
      summary: "Delete a Group permanently forever and all of its relations";
    };
  }

  // Roles
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/roles",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "List all pre-defined roles";
    };
  }

  rpc ListOrganizationRoles(ListOrganizationRolesRequest) returns (ListOrganizationRolesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/roles",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Get custom roles under an org";
    };
  }

  rpc CreateOrganizationRole(CreateOrganizationRoleRequest) returns (CreateOrganizationRoleResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{body.org_id}/roles",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Create Role";
    };
  }

  rpc GetOrganizationRole(GetOrganizationRoleRequest) returns (GetOrganizationRoleResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{org_id}/roles/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Get Role by ID";
    };
  }

  rpc UpdateOrganizationRole(UpdateOrganizationRoleRequest) returns (UpdateOrganizationRoleResponse) {
    option (google.api.http) = {
      put: "/v1beta1/organizations/{body.org_id}/roles/{id}",
      body: "body";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Update Role by ID";
    };
  }

  rpc DeleteOrganizationRole(DeleteOrganizationRoleRequest) returns (DeleteOrganizationRoleResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/organizations/{org_id}/roles/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Role";
      summary: "Delete a role permanently forever and all of its relations";
    };
  }

  // Organizations
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get all organization";
    };
  }

  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Create organization";
    };
  }

  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get organization by ID or slug";
    };
  }

  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      put: "/v1beta1/organizations/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Update organization by ID";
    };
  }

  rpc ListOrganizationAdmins(ListOrganizationAdminsRequest) returns (ListOrganizationAdminsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{id}/admins",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get all admins of an organization";
    };
  }

  rpc ListOrganizationUsers(ListOrganizationUsersRequest) returns (ListOrganizationUsersResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{id}/users",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "List organization users";
    };
  }

  rpc ListOrganizationProjects(ListOrganizationProjectsRequest) returns (ListOrganizationProjectsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/organizations/{id}/projects",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Get all projects that belong to an organization";
    };
  }

  rpc EnableOrganization(EnableOrganizationRequest) returns (EnableOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Enable an Organization";
    };
  }

  rpc DisableOrganization(DisableOrganizationRequest) returns (DisableOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/organizations/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Disable an organization";
    };
  }

  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/organizations/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organization";
      summary: "Delete an organization permanently forever and all of its relations";
    };
  }

  // Projects
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Create oroject";
    };
  }

  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Get oroject by ID";
    };
  }

  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      put: "/v1beta1/projects/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Update oroject by ID";
    };
  }

  rpc ListProjectAdmins(ListProjectAdminsRequest) returns (ListProjectAdminsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{id}/admins",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Get all Admins of a oroject";
    };
  }

  rpc ListProjectUsers(ListProjectUsersRequest) returns (ListProjectUsersResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{id}/users",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Get all users of a oroject";
    };
  }

  rpc EnableProject(EnableProjectRequest) returns (EnableProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects/{id}/enable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Enable a oroject";
    };
  }

  rpc DisableProject(DisableProjectRequest) returns (DisableProjectResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects/{id}/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Disable a oroject";
    };
  }

  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/projects/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Project";
      summary: "Delete a oroject permanently forever and all of its relations";
    };
  }

  // Policies
  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse) {
    option (google.api.http) = {
      post: "/v1beta1/policies",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Create policy";
    };
  }

  rpc GetPolicy(GetPolicyRequest) returns (GetPolicyResponse) {
    option (google.api.http) = {
      get: "/v1beta1/policies/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Get policy by ID";
    };
  }

  rpc UpdatePolicy(UpdatePolicyRequest) returns (UpdatePolicyResponse) {
    option (google.api.http) = {
      put: "/v1beta1/policies/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Update policy by ID";
    };
  }

  rpc DeletePolicy(DeletePolicyRequest) returns (DeletePolicyResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/policies/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Policy";
      summary: "Delete a policy permanently forever and all of its relations";
    };
  }

  // Relations
  rpc CreateRelation(CreateRelationRequest) returns (CreateRelationResponse) {
    option (google.api.http) = {
      post: "/v1beta1/relations",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "Create Relation";
    };
  }

  rpc GetRelation(GetRelationRequest) returns (GetRelationResponse) {
    option (google.api.http) = {
      get: "/v1beta1/relations/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "Get Relation by ID";
    };
  }

  rpc DeleteRelation(DeleteRelationRequest) returns (DeleteRelationResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/relations/{relation}/object/{object}/subject/{subject}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Relation";
      summary: "Remove a subject having a relation from an object";
    };
  }

  // Permissions
  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/permissions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Permission";
      summary: "Get all Permissions";
    };
  }

  rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {
    option (google.api.http) = {
      get: "/v1beta1/permissions/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Permission";
      summary: "Get permission by ID";
    };
  }

  // Namespaces
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/namespaces"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Namespace";
      summary: "Get all Namespaces";
    };
  }

  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse) {
    option (google.api.http) = {
      get: "/v1beta1/namespaces/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Namespace";
      summary: "Get a Namespaces";
    };
  }

  // Resources
  rpc ListProjectResources(ListProjectResourcesRequest) returns (ListProjectResourcesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{project_id}/resources"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Get all resources";
    };
  }

  rpc CreateProjectResource(CreateProjectResourceRequest) returns (CreateProjectResourceResponse) {
    option (google.api.http) = {
      post: "/v1beta1/projects/{body.project_id}/resources",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Create Resource";
    };
  }

  rpc GetProjectResource(GetProjectResourceRequest) returns (GetProjectResourceResponse) {
    option (google.api.http) = {
      get: "/v1beta1/projects/{project_id}/resources/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Get Resource by ID";
    };
  }

  rpc UpdateProjectResource(UpdateProjectResourceRequest) returns (UpdateProjectResourceResponse) {
    option (google.api.http) = {
      put: "/v1beta1/projects/{body.project_id}/resources/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Update Resource by ID";
    };
  }

  rpc DeleteProjectResource(DeleteProjectResourceRequest) returns (DeleteProjectResourceResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/projects/{project_id}/resources/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Resource";
      summary: "Delete a resource permanently forever";
    };
  }

  // Authz
  rpc CheckResourcePermission(CheckResourcePermissionRequest) returns (CheckResourcePermissionResponse) {
    option (google.api.http) = {
      post: "/v1beta1/check",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Authz";
      summary: "check permission on a resource of an user";
    };
  }

  // Authn
  rpc ListAuthStrategies(ListAuthStrategiesRequest) returns (ListAuthStrategiesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth"
    };
  }

  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/register/{strategy_name}"
      additional_bindings {
        post: "/v1beta1/auth/register/{strategy_name}"
      }
    };
  }

  rpc AuthCallback(AuthCallbackRequest) returns (AuthCallbackResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/callback"
      additional_bindings {
        post: "/v1beta1/auth/callback"
      }
    };
  }

  rpc AuthLogout(AuthLogoutRequest) returns (AuthLogoutResponse) {
    option (google.api.http) = {
      get: "/v1beta1/auth/logout"
      additional_bindings {
        delete: "/v1beta1/auth/logout"
      }
    };
  }
  
  // MetaSchemas
  rpc ListMetaSchemas(ListMetaSchemasRequest) returns (ListMetaSchemasResponse) {
    option (google.api.http) = {
      get: "/v1beta1/meta/schemas"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Get all Metadata Schemas";
    };
  }

  rpc CreateMetaSchema(CreateMetaSchemaRequest) returns (CreateMetaSchemaResponse) {
    option (google.api.http) = {
      post: "/v1beta1/meta/schemas",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Create Metadata Schema";
    };
  }

  rpc GetMetaSchema(GetMetaSchemaRequest) returns (GetMetaSchemaResponse) {
    option (google.api.http) = {
      get: "/v1beta1/meta/schemas/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Get MetaSchema by ID";
    };
  }

  rpc UpdateMetaSchema(UpdateMetaSchemaRequest) returns (UpdateMetaSchemaResponse) {
    option (google.api.http) = {
      put: "/v1beta1/meta/schemas/{id}",
      body: "body"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Update MetaSchema by ID";
    };
  }

  rpc DeleteMetaSchema(DeleteMetaSchemaRequest) returns (DeleteMetaSchemaResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/meta/schemas/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "MetaSchema";
      summary: "Delete a MetaSchema permanently";
    };
  }

}

message AuthLogoutRequest {}

message AuthLogoutResponse {}

message AuthCallbackRequest{
  // strategy_name will not be set for oidc but can be utilized for methods like email magic links
  string strategy_name = 1;
  
  // for oidc
  string state = 2;
  string code = 3;
}

message AuthCallbackResponse{
}

message AuthenticateRequest {
  string strategy_name = 1;

  // by default, location header for redirect if applicable
  // will be skipped unless this is set to true, useful in browser
  bool redirect = 2;

  // be default, after successful authentication no operation will be performed
  // to apply redirection in case of browsers, provide a url that will be used
  // for redirection after authentication
  string return_to = 3;
}

message AuthenticateResponse {
  string endpoint = 1;
}

message AuthStrategy {
  string name = 1;
  google.protobuf.Struct params = 2;
}

message ListAuthStrategiesRequest {}

message ListAuthStrategiesResponse {
  repeated AuthStrategy strategies = 1;
}

message UserRequestBody {
  string name = 1 [(validate.rules).string.pattern = "^([a-zA-Z][a-zA-Z0-9-_]{3,64})?$"];
  string email = 2 [(validate.rules).string.email = true];
  google.protobuf.Struct metadata = 3;
  string title = 4 [(validate.rules).string.pattern = "^[A-Za-z0-9-_ ]+$"];
}

message ListUsersRequest {
  int32 page_size = 1;
  int32 page_num = 2;

  string keyword = 3;
  string org_id = 4;
  string group_id = 5;
  string state = 6;
}

message ListUsersResponse {
  int32 count = 1;
  repeated User users = 2;
}

message CreateUserRequest {
  UserRequestBody body = 1 [(validate.rules).message.required = true];
}

message CreateUserResponse {
  User user = 1;
}


message GetOrganizationsByUserRequest {
  string id = 1;
}

message GetOrganizationsByUserResponse {
  repeated Organization organizations = 1;
}

message GetOrganizationsByCurrentUserRequest {}

message GetOrganizationsByCurrentUserResponse {
  repeated Organization organizations = 1;
}

message EnableUserRequest {
  string id = 1;
}

message EnableUserResponse {}

message DisableUserRequest {
  string id = 1;
}

message DisableUserResponse {}

message DeleteUserRequest {
  string id = 1;
}

message DeleteUserResponse {}

message GetUserResponse {
  User user = 1;
}

message GetCurrentUserRequest {}

message GetCurrentUserResponse {
  User user = 1;
}

message UpdateUserResponse {
  User user = 1;
}

message UpdateCurrentUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string id = 1;
  UserRequestBody body = 2;
}

message GetUserRequest {
  string id = 1;
}

message ListCurrentUserGroupsRequest {}

message ListCurrentUserGroupsResponse {
  repeated Group groups = 1;
}

message ListUserGroupsRequest {
  string id = 1;
  string role = 2;
}

message GroupRequestBody {
  string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9-_]+$"];
  string title = 2;
  google.protobuf.Struct metadata = 3;
  string org_id = 4;
}

message CreateGroupRequest {
  GroupRequestBody body = 1;
}

message ListUserGroupsResponse {
  repeated Group groups = 1;
}

message CreateGroupResponse {
  Group group = 1;
}

message GetGroupResponse {
  Group group = 1;
}

message UpdateGroupResponse {
  Group group = 1;
}

message UpdateGroupRequest {
  string id = 1;
  GroupRequestBody body = 2;
}

message UpdateCurrentUserRequest {
  UserRequestBody body = 1;
}

message GetGroupRequest {
  string id = 1;
  string org_id = 2;
}

message ListOrganizationGroupsRequest {
  string user_id = 1 [deprecated = true];
  string org_id = 2 [(validate.rules).string = {pattern: "^[A-Za-z0-9_-]+$", min_len: 3}];
  string state = 3;
}

message ListOrganizationGroupsResponse {
  repeated Group groups = 1;
}

message CreateOrganizationRoleRequest {
  RoleRequestBody body = 1;
}

message CreateOrganizationRoleResponse {
  Role role = 1;
}

message GetOrganizationRoleRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message GetOrganizationRoleResponse {
  Role role = 1;
}

message UpdateOrganizationRoleRequest {
  string id = 1;
  RoleRequestBody body = 2;
}

message UpdateOrganizationRoleResponse {
  Role role = 1;
}

message ListRolesRequest {
  string state = 1;
}

message ListRolesResponse {
  repeated Role roles = 1;
}

message ListOrganizationRolesRequest {
  string org_id = 1 [(validate.rules).string.min_len = 3];
  string state = 2;
}

message ListOrganizationRolesResponse {
  repeated Role roles = 1;
}

message DeleteOrganizationRoleRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message DeleteOrganizationRoleResponse{}

message OrganizationRequestBody {
  string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9-_ ]+$"];
  string title = 2;
  google.protobuf.Struct metadata = 3;
}

message ListOrganizationsRequest {
  string user_id = 1;
  string state = 2;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
}

message CreateOrganizationRequest {
  OrganizationRequestBody body = 1;
}

message CreateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationRequest {
  string id = 1;
}

message UpdateOrganizationRequest {
  string id = 1;
  OrganizationRequestBody body = 2;
}

message ListOrganizationAdminsRequest {
  string id = 1 [(validate.rules).string.min_len = 3]; 
}

message ListOrganizationAdminsResponse {
  repeated User users = 1;
}

message ListOrganizationUsersRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string permission_filter = 2;
}

message ListOrganizationUsersResponse {
  repeated User users = 1;
}

message EnableOrganizationRequest {
  string id = 1;
}

message EnableOrganizationResponse {}

message DisableOrganizationRequest {
  string id = 1;
}

message DisableOrganizationResponse {}


message DeleteOrganizationRequest {
  string id = 1;
}

message DeleteOrganizationResponse {}

message ProjectRequestBody {
  string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9-_]+$"];
  string title = 2;
  google.protobuf.Struct metadata = 3;
  string org_id = 4 [(validate.rules).string.min_len = 3];
}

message CreateProjectRequest {
  ProjectRequestBody body = 1;
}

message CreateProjectResponse {
  Project project = 1;
}

message GetProjectResponse {
  Project project = 1;
}

message UpdateProjectResponse {
  Project project = 1;
}

message ListOrganizationProjectsRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string state = 2;
}

message ListOrganizationProjectsResponse {
  repeated Project projects = 1;
}

message GetProjectRequest {
  string id = 1;
}

message UpdateProjectRequest {
  string id = 1;
  ProjectRequestBody body = 2;
}

message ListProjectAdminsRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
}

message ListProjectAdminsResponse {
  repeated User users = 1;
}

message ListProjectUsersRequest {
  string id = 1 [(validate.rules).string.min_len = 3];
  string permission_filter = 2;
}

message ListProjectUsersResponse {
  repeated User users = 1;
}

message EnableProjectRequest {
  string id = 1;
}

message EnableProjectResponse {}

message DisableProjectRequest {
  string id = 1;
}

message DisableProjectResponse {}

message DeleteProjectRequest {
  string id = 1;
}

message DeleteProjectResponse {}

message PolicyRequestBody {
  string role_id = 1;
  string title = 3;
  
  // namespace:uuid
  string resource = 2;
  // namespace:uuid
  string principal = 4;
  google.protobuf.Struct metadata = 5;
}

message GetPermissionRequest {
  string id = 1;
}

message GetPermissionResponse {
  Permission permission = 1;
}

message ListPermissionsRequest {}

message ListPermissionsResponse {
  repeated Permission permissions = 1;
}

message ListNamespacesRequest {}

message ListNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message GetNamespaceRequest {
  string id = 1;
}

message GetNamespaceResponse {
  Namespace namespace = 1;
}

message CreatePolicyRequest {
  PolicyRequestBody body = 1;
}

message CreatePolicyResponse {
  reserved 1;
  Policy policy = 2;
}

message GetPolicyRequest {
  string id = 1;
}

message GetPolicyResponse {
  Policy policy = 1;
}

message UpdatePolicyRequest {
  string id = 1;
  PolicyRequestBody body = 2;
}

message UpdatePolicyResponse {
  repeated Policy policies = 1;
}

message DeletePolicyRequest {
  string id = 1;
}

message DeletePolicyResponse {}

message RelationRequestBody {
  reserved 2, 5;

  // objectnamespace:uuid
  string object = 1;
  // subjectnamespace:uuid
  string subject = 3;
  string relation = 4;
  string subject_sub_relation = 6;
}

message CreateRelationRequest {
  RelationRequestBody body = 1;
}

message CreateRelationResponse {
  Relation relation = 1;
}

message GetRelationRequest {
  string id = 1;
}

message GetRelationResponse {
  Relation relation = 1;
}

message UpdateRelationRequest {
  string id = 1;
  RelationRequestBody body = 2;
}

message UpdateRelationResponse {
  Relation relation = 1;
}

message ListGroupUsersRequest {
  string id = 1;
  string org_id = 2;
}

message ListGroupUsersResponse {
  repeated User users = 1;
}

message EnableGroupRequest{
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message EnableGroupResponse{}

message DisableGroupRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message DisableGroupResponse {}

message DeleteGroupRequest {
  string id = 1;
  string org_id = 2 [(validate.rules).string.min_len = 3];
}

message DeleteGroupResponse {}

message DeleteRelationRequest {
  reserved 3;

  // objectnamespace:uuid
  string object = 1;
  // subjectnamespace:uuid
  string subject = 2;
  string relation = 4;
}

message DeleteRelationResponse {}

message ListProjectResourcesRequest {
  reserved 1;
  string project_id = 2 [(validate.rules).string.min_len = 3];
  string namespace = 4;
}

message ListProjectResourcesResponse {
  repeated Resource resources = 1;
}

message ResourceRequestBody {
  reserved 4, 5;
  string name = 1;
  string project_id = 2;
  string namespace = 3;
  string user_id = 6;
  google.protobuf.Struct metadata = 7;
}

message CreateProjectResourceRequest {
  ResourceRequestBody body = 1;
}

message CreateProjectResourceResponse {
  Resource resource = 1;
}

message GetProjectResourceRequest {
  reserved 2;
  string id = 1;
  string project_id = 3 [(validate.rules).string.min_len = 3];
}

message GetProjectResourceResponse {
  Resource resource = 1;
}

message UpdateProjectResourceRequest {
  string id = 1;
  ResourceRequestBody body = 2;
}

message UpdateProjectResourceResponse {
  Resource resource = 1;
}

message DeleteProjectResourceRequest {
  string id = 1;
  string project_id = 3 [(validate.rules).string.min_len = 3];
}

message DeleteProjectResourceResponse {}

message CheckResourcePermissionRequest {
  string object_id = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
  string object_namespace = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_/-]+$"];
  string permission = 3 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
}

message CheckResourcePermissionResponse {
  bool status = 1;
}

message MetaSchemaRequestBody {
  string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9-_]+$"];
  string schema = 2 [(validate.rules).string.min_len = 2];
}

message CreateMetaSchemaRequest{
  MetaSchemaRequestBody body = 1;
}

message CreateMetaSchemaResponse{
  MetaSchema metaschema = 1;
}

message GetMetaSchemaRequest{
  string id = 1;
}

message GetMetaSchemaResponse{
  MetaSchema metaschema = 1;
}

message UpdateMetaSchemaRequest{
  string id = 1;
  MetaSchemaRequestBody body = 2 [(validate.rules).message.required = true];
}

message UpdateMetaSchemaResponse{
  MetaSchema metaschema = 1;
}

message DeleteMetaSchemaRequest{
  string id = 1;
}

message DeleteMetaSchemaResponse{}

message ListMetaSchemasRequest{}

message ListMetaSchemasResponse{
  repeated MetaSchema metaschemas = 1;
}