syntax = "proto3";

package odpf.compass.v1beta1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/odpf/proton/compass/v1beta1;compassv1beta1";
option java_multiple_files = true;
option java_outer_classname = "CompassServiceProto";
option java_package = "io.odpf.proton.compass";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Compass";
    description: "Documentation of our Compass API with gRPC and gRPC-Gateway.";
    version: "0.2.1";
    license: {
      name: "Apache License 2.0";
      url: "https://github.com/odpf/compass/blob/main/LICENSE";
    };
  };
  external_docs: {
    url: "https://odpf.gitbook.io/compass/";
    description: "More about Compass";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "400";
    value: {
      description: "Returned when the data that user input is wrong.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "409";
    value: {
      description: "Returned when the resource already exist.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "500";
    value: {
      description: "Returned when theres is something wrong on the server side.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
};

// WARNING: This is still in active development and can have breaking changes
service CompassService {
  // Domain: Discussion
  rpc GetAllDiscussions(GetAllDiscussionsRequest) returns (GetAllDiscussionsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/discussions"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get all discussions";
      tags: "Discussion";
    };
  }

  rpc CreateDiscussion(CreateDiscussionRequest) returns (CreateDiscussionResponse) {
    option (google.api.http) = {
      post: "/v1beta1/discussions"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a discussion";
      tags: "Discussion";
    };
  }

  rpc GetDiscussion(GetDiscussionRequest) returns (GetDiscussionResponse) {
    option (google.api.http) = {
      get: "/v1beta1/discussions/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a discussion";
      tags: "Discussion";
    };
  }

  rpc PatchDiscussion(PatchDiscussionRequest) returns (PatchDiscussionResponse) {
    option (google.api.http) = {
      patch: "/v1beta1/discussions/{id}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Patch a discussion";
      tags: "Discussion";
    };
  }

  rpc CreateComment(CreateCommentRequest) returns (CreateCommentResponse) {
    option (google.api.http) = {
      post: "/v1beta1/discussions/{discussion_id}/comments"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a comment of a discussion";
      tags: [
        "Discussion",
        "Comment"
      ];
    };
  }

  rpc GetAllComments(GetAllCommentsRequest) returns (GetAllCommentsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/discussions/{discussion_id}/comments"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get all comments of a discussion";
      tags: [
        "Discussion",
        "Comment"
      ];
    };
  }

  rpc GetComment(GetCommentRequest) returns (GetCommentResponse) {
    option (google.api.http) = {
      get: "/v1beta1/discussions/{discussion_id}/comments/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a comment of a discussion";
      tags: [
        "Discussion",
        "Comment"
      ];
    };
  }

  rpc UpdateComment(UpdateCommentRequest) returns (UpdateCommentResponse) {
    option (google.api.http) = {
      put: "/v1beta1/discussions/{discussion_id}/comments/{id}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a comment of a discussion";
      tags: [
        "Discussion",
        "Comment"
      ];
    };
  }

  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/discussions/{discussion_id}/comments/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a comment of a discussion";
      tags: [
        "Discussion",
        "Comment"
      ];
    };
  }

  // Domain: Asset
  rpc SearchAssets(SearchAssetsRequest) returns (SearchAssetsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/search"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Search for an asset";
      description: "API for querying documents. 'text' is fuzzy matched against all the available datasets, and matched results are returned. You can specify additional match criteria using 'filter[.*]' query parameters. You can specify each filter multiple times to specify a set of values for those filters. For instance, to specify two landscape 'vn' and 'th', the query could be `/search/?text=<text>&filter[environment]=integration&filter[landscape]=vn&filter[landscape]=th`. As an alternative, this API also supports fuzzy filter match with 'query' query params. For instance, searching assets that has 'bigqu' term in its description `/search/?text=<text>&query[description]=bigqu`";
      tags: [
        "Search",
        "Asset"
      ];
    };
  }

  rpc SuggestAssets(SuggestAssetsRequest) returns (SuggestAssetsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/search/suggest"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Suggest an asset";
      description: "API for retreiving N number of asset names that similar with the `text`. By default, N = 5 for now and hardcoded in the code.";
      tags: [
        "Search",
        "Asset"
      ];
    };
  }

  rpc GetGraph(GetGraphRequest) returns (GetGraphResponse) {
    option (google.api.http) = {
      get: "/v1beta1/lineage/{urn=**}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Lineage Graph";
      description: "Returns the lineage graph. Each entry in the graph describes a (edge) directed relation of assets with source and destination using it's urn, type, and service.";
      tags: [
        "Lineage",
        "Asset"
      ];
    };
  }

  rpc GetAllTypes(GetAllTypesRequest) returns (GetAllTypesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/types"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "fetch all types";
      description: "Fetch all types supported in Compass";
      tags: [
        "Type"
      ];
    };
  }

  rpc GetAllAssets(GetAllAssetsRequest) returns (GetAllAssetsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/assets"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get list of assets";
      description: "Returns list of assets, optionally filtered by types, services, sorting, fields in asset.data and querying fields ";
      tags: [
        "Asset"
      ];
    };
  }

  rpc GetAssetByID(GetAssetByIDRequest) returns (GetAssetByIDResponse) {
    option (google.api.http) = {
      get: "/v1beta1/assets/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Find an asset";
      description: "Returns a single asset with given ID";
      tags: [
        "Asset"
      ];
    };
  }

  rpc UpsertAsset(UpsertAssetRequest) returns (UpsertAssetResponse) {
    option (google.api.http) = {
      put: "/v1beta1/assets"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update/Create an asset";
      description: "Upsert will update an asset or create a new one if it does not exist yet";
      tags: [
        "Asset"
      ];
    };
  }

  rpc UpsertPatchAsset(UpsertPatchAssetRequest) returns (UpsertPatchAssetResponse) {
    option (google.api.http) = {
      patch: "/v1beta1/assets"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Patch/Create an asset";
      description: "Similar to Upsert but with patch strategy and different body format";
      tags: [
        "Asset"
      ];
    };
  }

  rpc DeleteAsset(DeleteAssetRequest) returns (DeleteAssetResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/assets/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete an asset";
      description: "Delete a single asset with given ID";
      tags: [
        "Asset"
      ];
    };
  }

  rpc GetAssetStargazers(GetAssetStargazersRequest) returns (GetAssetStargazersResponse) {
    option (google.api.http) = {
      get: "/v1beta1/assets/{id}/stargazers"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Find users that stars an asset";
      description: "Returns a list of users that stars an asset";
      tags: [
        "Asset"
      ];
    };
  }

  rpc GetAssetVersionHistory(GetAssetVersionHistoryRequest) returns (GetAssetVersionHistoryResponse) {
    option (google.api.http) = {
      get: "/v1beta1/assets/{id}/versions"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get version history of an asset";
      description: "Returns a list of asset version history";
      tags: [
        "Asset"
      ];
    };
  }

  rpc GetAssetByVersion(GetAssetByVersionRequest) returns (GetAssetByVersionResponse) {
    option (google.api.http) = {
      get: "/v1beta1/assets/{id}/versions/{version}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get asset's previous version";
      description: "Returns a specific version of an asset";
      tags: [
        "Asset"
      ];
    };
  }

  rpc CreateAssetProbe(CreateAssetProbeRequest) returns (CreateAssetProbeResponse) {
    option (google.api.http) = {
      post: "/v1beta1/assets/{asset_urn}/probes";
      body: "probe";
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create asset's probe";
      description: "Add a new probe to an asset";
      tags: [
        "Asset"
      ];
    };
  }

  // Domain: User * Star
  rpc GetUserStarredAssets(GetUserStarredAssetsRequest) returns (GetUserStarredAssetsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/users/{user_id}/starred"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get assets starred by a user";
      description: "Get all assets starred by a user";
      tags: [
        "User",
        "Star"
      ];
    };
  }

  rpc GetMyStarredAssets(GetMyStarredAssetsRequest) returns (GetMyStarredAssetsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/me/starred"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get my starred assets";
      description: "Get all assets starred by me";
      tags: [
        "User",
        "Star"
      ];
    };
  }

  rpc GetMyStarredAsset(GetMyStarredAssetRequest) returns (GetMyStarredAssetResponse) {
    option (google.api.http) = {
      get: "/v1beta1/me/starred/{asset_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get my starred asset";
      description: "Get an asset starred by me";
      tags: [
        "User",
        "Star"
      ];
    };
  }

  rpc StarAsset(StarAssetRequest) returns (StarAssetResponse) {
    option (google.api.http) = {
      put: "/v1beta1/me/starred/{asset_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Star an asset";
      description: "Mark an asset with a star";
      tags: [
        "User",
        "Star"
      ];
    };
  }

  rpc UnstarAsset(UnstarAssetRequest) returns (UnstarAssetResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/me/starred/{asset_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Unstar an asset";
      description: "Unmark my starred asset";
      tags: [
        "User",
        "Star"
      ];
    };
  }

  rpc GetMyDiscussions(GetMyDiscussionsRequest) returns (GetMyDiscussionsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/me/discussions"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get all discussions of a user";
      description: "Returns all discussions given possible filters of a user";
      tags: [
        "User",
        "Discussion"
      ];
    };
  }

  // Domain: Tag Templates
  rpc CreateTagAsset(CreateTagAssetRequest) returns (CreateTagAssetResponse) {
    option (google.api.http) = {
      post: "/v1beta1/tags/assets"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Tag an asset";
      description: "Tag an asset with a tag template";
      tags: [
        "Tag"
      ];
    };
  }

  rpc GetTagByAssetAndTemplate(GetTagByAssetAndTemplateRequest) returns (GetTagByAssetAndTemplateResponse) {
    option (google.api.http) = {
      get: "/v1beta1/tags/assets/{asset_id}/templates/{template_urn}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Find a tag by asset and template";
      description: "Find a single tag using asset id and template urn";
      tags: [
        "Tag"
      ];
    };
  }

  rpc UpdateTagAsset(UpdateTagAssetRequest) returns (UpdateTagAssetResponse) {
    option (google.api.http) = {
      put: "/v1beta1/tags/assets/{asset_id}/templates/{template_urn}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a tag on an asset";
      description: "Update a tag on an asset";
      tags: [
        "Tag"
      ];
    };
  }

  rpc DeleteTagAsset(DeleteTagAssetRequest) returns (DeleteTagAssetResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/tags/assets/{asset_id}/templates/{template_urn}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove a tag on an asset";
      description: "Remove a tag on an asset in a type";
      tags: [
        "Tag"
      ];
    };
  }

  rpc GetAllTagsByAsset(GetAllTagsByAssetRequest) returns (GetAllTagsByAssetResponse) {
    option (google.api.http) = {
      get: "/v1beta1/tags/assets/{asset_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get an asset's tags";
      description: "Get all tags for an assets";
      tags: [
        "Tag"
      ];
    };
  }

  rpc GetAllTagTemplates(GetAllTagTemplatesRequest) returns (GetAllTagTemplatesResponse) {
    option (google.api.http) = {
      get: "/v1beta1/tags/templates"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get all tag templates";
      description: "Get all available tag templates";
      tags: [
        "Tag"
      ];
    };
  }

  rpc CreateTagTemplate(CreateTagTemplateRequest) returns (CreateTagTemplateResponse) {
    option (google.api.http) = {
      post: "/v1beta1/tags/templates"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a template";
      description: "Create a new tag template";
      tags: [
        "Tag"
      ];
    };
  }

  rpc GetTagTemplate(GetTagTemplateRequest) returns (GetTagTemplateResponse) {
    option (google.api.http) = {
      get: "/v1beta1/tags/templates/{template_urn}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a tag template";
      description: "Get a single tag template";
      tags: [
        "Tag"
      ];
    };
  }

  rpc UpdateTagTemplate(UpdateTagTemplateRequest) returns (UpdateTagTemplateResponse) {
    option (google.api.http) = {
      put: "/v1beta1/tags/templates/{template_urn}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a template";
      description: "Update an existing tag template";
      tags: [
        "Tag"
      ];
    };
  }

  rpc DeleteTagTemplate(DeleteTagTemplateRequest) returns (DeleteTagTemplateResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/tags/templates/{template_urn}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a tag template";
      description: "Delete a single tag template";
      tags: [
        "Tag"
      ];
    };
  }
}

message GetAllDiscussionsRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "Some parameters to fetch discussions"
    }
  };

  string type = 1 [(validate.rules).string.ignore_empty = true];
  string state = 2 [(validate.rules).string.ignore_empty = true];
  string owner = 3 [(validate.rules).string.ignore_empty = true];
  string assignee = 4 [(validate.rules).string.ignore_empty = true];
  string asset = 5 [(validate.rules).string.ignore_empty = true];
  string labels = 6 [(validate.rules).string.ignore_empty = true];
  string sort = 7 [(validate.rules).string.ignore_empty = true];
  string direction = 8 [(validate.rules).string.ignore_empty = true];
  uint32 size = 9 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
  uint32 offset = 10 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
}

message GetAllDiscussionsResponse {
  repeated Discussion data = 1;
}

message CreateDiscussionRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "Request to be sent to create a discussion"
      required: [
        "title",
        "body"
      ]
    }
  };

  string title = 2 [(validate.rules).string.min_len = 1];
  string body = 3 [(validate.rules).string.min_len = 1];
  string type = 4;
  string state = 5 [(validate.rules).string.ignore_empty = true];
  repeated string labels = 6 [(validate.rules).repeated = {
    unique: true,
    ignore_empty: true
  }];
  repeated string assets = 7 [(validate.rules).repeated = {
    unique: true,
    ignore_empty: true
  }];
  repeated string assignees = 8 [(validate.rules).repeated = {
    unique: true,
    ignore_empty: true
  }];
}

message CreateDiscussionResponse {
  string id = 1;
}

message GetDiscussionRequest {
  string id = 1;
}

message GetDiscussionResponse {
  Discussion data = 1;
}

message PatchDiscussionRequest {
  string id = 1;
  string title = 2 [(validate.rules).string.ignore_empty = true];
  string body = 3 [(validate.rules).string.ignore_empty = true];
  string type = 4 [(validate.rules).string.ignore_empty = true];
  string state = 5 [(validate.rules).string.ignore_empty = true];
  repeated string labels = 6 [(validate.rules).repeated = {
    unique: true,
    ignore_empty: true
  }];
  repeated string assets = 7 [(validate.rules).repeated = {
    unique: true,
    ignore_empty: true
  }];
  repeated string assignees = 8 [(validate.rules).repeated = {
    unique: true,
    ignore_empty: true
  }];
}

message CreateCommentRequest {
  string discussion_id = 1;
  string body = 2 [(validate.rules).string.min_len = 1];
}

message PatchDiscussionResponse {}

message CreateCommentResponse {
  string id = 1;
}

message GetAllCommentsRequest {
  string discussion_id = 1;
  string sort = 2 [(validate.rules).string.ignore_empty = true];
  string direction = 3 [(validate.rules).string.ignore_empty = true];
  uint32 size = 4 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
  uint32 offset = 5 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
}

message GetAllCommentsResponse {
  repeated Comment data = 1;
}

message GetCommentRequest {
  string discussion_id = 1;
  string id = 2;
}

message GetCommentResponse {
  Comment data = 1;
}

message UpdateCommentRequest {
  string discussion_id = 1;
  string id = 2;
  string body = 3 [(validate.rules).string.min_len = 1];
}

message UpdateCommentResponse {}

message DeleteCommentRequest {
  string discussion_id = 1;
  string id = 2;
}

message DeleteCommentResponse {}

message SearchAssetsRequest {
  string text = 1 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "text to search for (fuzzy)"
    }
  ];
  string rankby = 2 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "descendingly sort based on a numeric field in the asset. the nested field is written with period separated field name. eg, \"rankby[data.profile.usage_count]\""
    }
  ];
  uint32 size = 3 [
    (validate.rules).uint32 = {
      gte: 0,
      ignore_empty: true
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "number of results to return"
    }
  ];
  map<string, string> filter = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "filter result based on a (nested) field of the asset. the nested field is written with period separated field name. eg, \"filter[data.landscape]\""
  }];
  map<string, string> query = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "query result based on a (nested) field of the asset. the nested field is written with period separated field name. eg, \"query[data.owner]\""
  }];

  repeated string include_fields = 6 [(validate.rules).repeated = {
    unique: true,
    ignore_empty: true
  }];

  uint32 offset = 7 [
    (validate.rules).uint32 = {
      gte: 0,
      ignore_empty: true
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "offset parameter defines the offset from the first result you want to fetch"
    }
  ];
}

message SearchAssetsResponse {
  repeated Asset data = 1;
}

message SuggestAssetsRequest {
  string text = 1 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "text to search for suggestions"
    }
  ];
}

message SuggestAssetsResponse {
  repeated string data = 1;
}

message GetGraphRequest {
  string urn = 1;
  uint32 level = 2;
  string direction = 3 [(validate.rules).string = {
    in: [
      "upstream",
      "downstream",
      ""
    ]
  }];
}

message GetGraphResponse {
  message ProbesInfo {
    Probe latest = 1;
  }

  message NodeAttributes {
    ProbesInfo probes = 1;
  }

  // Edges in the graph.
  repeated LineageEdge data = 1;
  // Key is the asset URN. Node attributes, if present, will be returned for
  // source and target nodes in the LineageEdge.
  map<string, NodeAttributes> node_attrs = 2;
}

message GetAllTypesRequest {
  string q = 1 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "filter by specific query"
    }
  ];
  string q_fields = 2 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "filter by multiple query fields"
    }
  ];
  string types = 3 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "filter by multiple types"
    }
  ];
  string services = 4 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "filter by multiple services"
    }
  ];
  map<string, string> data = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "query result based on a (nested) field of the data asset. the nested field is written with period separated field name. eg, \"data[name.entity]\""
  }];
}

message GetAllTypesResponse {
  repeated Type data = 1;
}

message GetAllAssetsRequest {
  string q = 1 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "filter by specific query"
    }
  ];
  string q_fields = 2 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "filter by multiple query fields"
    }
  ];
  string types = 3 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "filter by multiple types"
    }
  ];
  string services = 4 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "filter by multiple services"
    }
  ];
  string sort = 5 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "sorting based on fields"
    }
  ];
  string direction = 6 [
    (validate.rules).string.ignore_empty = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "sorting direction can either be asc or desc "
    }
  ];
  map<string, string> data = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "query result based on a (nested) field of the data asset. the nested field is written with period separated field name. eg, \"data[name.entity]\""
  }];
  uint32 size = 8 [
    (validate.rules).uint32 = {
      gte: 0,
      ignore_empty: true
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "maximum size to fetch"
    }
  ];
  uint32 offset = 9 [
    (validate.rules).uint32 = {
      gte: 0,
      ignore_empty: true
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "offset to fetch from"
    }
  ];
  bool with_total = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "if set include total field in response"
  }];
}

message GetAllAssetsResponse {
  repeated Asset data = 1;
  uint32 total = 2;
}

message GetAssetByIDRequest {
  string id = 1;
}

message GetAssetByIDResponse {
  Asset data = 1;
}

message UpsertAssetRequest {
  message Asset {
    string urn = 1;
    string type = 2;
    string name = 3;
    string service = 4;
    string description = 5;
    google.protobuf.Struct data = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "dynamic data of an asset"
    }];
    map<string, string> labels = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "labels of an asset"
    }];
    repeated User owners = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "list of owners of the asset"
    }];
    string url = 9;
  }
  Asset asset = 1;
  repeated LineageNode upstreams = 2;
  repeated LineageNode downstreams = 3;
}

message UpsertAssetResponse {
  string id = 1;
}

message UpsertPatchAssetRequest {
  message Asset {
    string urn = 1;
    string type = 2;
    google.protobuf.StringValue name = 3 [
      (validate.rules).string.ignore_empty = true,
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "name of an asset"
      }
    ];
    string service = 4;
    google.protobuf.StringValue description = 5 [
      (validate.rules).string.ignore_empty = true,
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "description of an asset"
      }
    ];
    google.protobuf.Struct data = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "dynamic data of an asset"
    }];
    map<string, string> labels = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "labels of an asset"
    }];
    repeated User owners = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "list of owners of the asset"
    }];
    string url = 9;
  }
  Asset asset = 1;
  repeated LineageNode upstreams = 2;
  repeated LineageNode downstreams = 3;

  // overwrite_lineage determines whether the asset's lineage should be
  // overwritten with the upstreams and downstreams specified in the request.
  // Currently, it is only applicable when both upstreams and downstreams are
  // empty/not specified.
  bool overwrite_lineage = 4;
}

message UpsertPatchAssetResponse {
  string id = 1;
}

message DeleteAssetRequest {
  string id = 1;
}

message DeleteAssetResponse {}

message GetAssetStargazersRequest {
  string id = 1;
  uint32 size = 2 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
  uint32 offset = 3 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
}

message GetAssetStargazersResponse {
  repeated User data = 1;
}

message GetAssetVersionHistoryRequest {
  string id = 1;
  uint32 size = 2 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
  uint32 offset = 3 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
}

message GetAssetVersionHistoryResponse {
  repeated Asset data = 1;
}

message GetAssetByVersionRequest {
  string id = 1;
  string version = 2;
}

message GetAssetByVersionResponse {
  Asset data = 1;
}

message CreateAssetProbeRequest {
  message Probe {
    string status = 1 [
      (validate.rules).string = {
        min_len: 1,
      },
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        required: [
          "status"
        ]
      }
    ];
    string status_reason = 2;
    google.protobuf.Struct metadata = 3;
    google.protobuf.Timestamp timestamp = 4;
  }
  string asset_urn = 1 [(validate.rules).string = {
    min_len: 1,
  }];
  Probe probe = 2;
}

message CreateAssetProbeResponse {
  string id = 1;
}

message GetUserStarredAssetsRequest {
  string user_id = 1;
  uint32 size = 2 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
  uint32 offset = 3 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
}

message GetUserStarredAssetsResponse {
  repeated Asset data = 1;
}

message GetMyStarredAssetsRequest {
  uint32 size = 1 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
  uint32 offset = 2 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
}

message GetMyStarredAssetsResponse {
  repeated Asset data = 1;
}

message GetMyStarredAssetRequest {
  string asset_id = 1;
}

message GetMyStarredAssetResponse {
  Asset data = 1;
}

message StarAssetRequest {
  string asset_id = 1;
}

message StarAssetResponse {
  string id = 1;
}

message UnstarAssetRequest {
  string asset_id = 1;
}

message UnstarAssetResponse {}

message GetMyDiscussionsRequest {
  string filter = 1 [(validate.rules).string.ignore_empty = true];
  string type = 2 [(validate.rules).string.ignore_empty = true];
  string state = 3 [(validate.rules).string.ignore_empty = true];
  string asset = 4 [(validate.rules).string.ignore_empty = true];
  string labels = 5 [(validate.rules).string.ignore_empty = true];
  string sort = 6 [(validate.rules).string.ignore_empty = true];
  string direction = 7 [(validate.rules).string.ignore_empty = true];
  uint32 size = 8 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
  uint32 offset = 9 [(validate.rules).uint32 = {
    gte: 0,
    ignore_empty: true
  }];
}

message GetMyDiscussionsResponse {
  repeated Discussion data = 1;
}

message CreateTagAssetRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "CreateTagAssetRequest"
      description: "Request to be sent to create a tag"
      required: [
        "asset_id",
        "template_urn",
        "tag_values"
      ]
    }
  };

  string asset_id = 1; // required
  string template_urn = 2; // required
  repeated TagValue tag_values = 3; // required
  string template_display_name = 4;
  string template_description = 5;
}

message CreateTagAssetResponse {
  Tag data = 1;
}

message GetTagByAssetAndTemplateRequest {
  string asset_id = 1;
  string template_urn = 3;
}

message GetTagByAssetAndTemplateResponse {
  Tag data = 1;
}

message UpdateTagAssetRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateTagAssetRequest"
      description: "Request to be sent to update an asset tag"
      required: [
        "asset_id",
        "tag_values"
      ]
    }
  };

  string asset_id = 1; // required
  string template_urn = 2;
  repeated TagValue tag_values = 3; // required
  string template_display_name = 4;
  string template_description = 5;
}

message UpdateTagAssetResponse {
  Tag data = 1;
}

message DeleteTagAssetRequest {
  string asset_id = 1;
  string template_urn = 2;
}

message DeleteTagAssetResponse {}

message GetAllTagsByAssetRequest {
  string asset_id = 1;
}

message GetAllTagsByAssetResponse {
  repeated Tag data = 1;
}

message GetAllTagTemplatesRequest {
  string urn = 1;
}

message GetAllTagTemplatesResponse {
  repeated TagTemplate data = 1;
}

message CreateTagTemplateRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "CreateTagTemplateRequest"
      description: "Request to be sent to create a tag's template"
      required: [
        "urn",
        "display_name",
        "description",
        "tag_values"
      ]
    }
  };

  string urn = 1; // required
  string display_name = 2; // required
  string description = 3; // required
  repeated TagTemplateField fields = 4; // required
}

message CreateTagTemplateResponse {
  TagTemplate data = 1;
}

message GetTagTemplateRequest {
  string template_urn = 1;
}

message GetTagTemplateResponse {
  TagTemplate data = 1;
}

message UpdateTagTemplateRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateTagTemplateRequest"
      description: "Request to be sent to update a tag's template"
      required: [
        "template_urn",
        "display_name",
        "description",
        "fields"
      ]
    }
  };

  string template_urn = 1;
  string display_name = 2; // required
  string description = 3; // required
  repeated TagTemplateField fields = 4; // required
}

message UpdateTagTemplateResponse {
  TagTemplate data = 1;
}

message DeleteTagTemplateRequest {
  string template_urn = 1;
}

message DeleteTagTemplateResponse {}

// Entities

message User {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "User"
    }
  };

  string id = 1;
  string uuid = 2;
  string email = 3;
  string provider = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message Change {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Change"
    }
  };

  string type = 1;
  repeated string path = 2;
  google.protobuf.Value from = 3;
  google.protobuf.Value to = 4;
}

message Asset {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Asset"
    }
  };

  string id = 1;
  string urn = 2;
  string type = 3;
  string service = 4;
  string name = 5;
  string description = 6;
  google.protobuf.Struct data = 7;
  map<string, string> labels = 8;
  repeated User owners = 9;
  string version = 10;
  User updated_by = 11;
  repeated Change changelog = 12;
  google.protobuf.Timestamp created_at = 13;
  google.protobuf.Timestamp updated_at = 14;
  string url = 15;
  repeated Probe probes = 16;
}

message Probe {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Probe"
    }
  };

  string id = 1;
  string asset_urn = 2;
  string status = 3;
  string status_reason = 4;
  google.protobuf.Struct metadata = 5;
  google.protobuf.Timestamp timestamp = 6;
  google.protobuf.Timestamp created_at = 7;
}

message Discussion {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Discussion"
    }
  };

  string id = 1;
  string title = 2;
  string body = 3;
  string type = 4;
  string state = 5;
  repeated string labels = 6;
  repeated string assets = 7;
  repeated string assignees = 8;
  User owner = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message Comment {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Comment"
    }
  };

  string id = 1;
  string discussion_id = 2;
  string body = 3;
  User owner = 4;
  User updated_by = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

message LineageEdge {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "LineageEdge"
    }
  };

  string source = 1;
  string target = 2;
  google.protobuf.Struct prop = 3;
}

message LineageNode {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "LineageNode"
    }
  };

  string urn = 1;
  string type = 2 [deprecated = true];
  string service = 3 [deprecated = true];
}

message Tag {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Tag"
    }
  };

  string asset_id = 1;
  string template_urn = 2;
  repeated TagValue tag_values = 3;
  string template_display_name = 4;
  string template_description = 5;
}

message TagValue {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "TagValue"
    }
  };

  uint32 field_id = 1;
  google.protobuf.Value field_value = 2;
  string field_urn = 3;
  string field_display_name = 4;
  string field_description = 5;
  string field_data_type = 6;
  repeated string field_options = 7;
  bool field_required = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message TagTemplate {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "TagTemplate"
    }
  };

  string urn = 1;
  string display_name = 2;
  string description = 3;
  repeated TagTemplateField fields = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message TagTemplateField {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "TagTemplateField"
    }
  };

  uint32 id = 1;
  string urn = 2;
  string display_name = 3;
  string description = 4;
  string data_type = 5;
  repeated string options = 6;
  bool required = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

message Type {
  string name = 1;
  uint32 count = 2;
}
