syntax = "proto3";

package odpf.optimus.plugins.v1beta1;

option go_package = "github.com/odpf/proton/optimus";
option java_multiple_files = true;
option java_outer_classname = "BasePluginProto";
option java_package = "io.odpf.proton.optimus.plugins";

// BaseService must be implemented by all plugins
service BaseService {
  // PluginInfo provides basic details for this plugin
  rpc PluginInfo(PluginInfoRequest) returns (PluginInfoResponse);
}

// PluginType enumerates the type of plugins Optimus supports
enum PluginType {
  PLUGIN_TYPE_UNSPECIFIED = 0;
  PLUGIN_TYPE_TASK = 1;
  PLUGIN_TYPE_HOOK = 2;
}

// PluginMod enumerates the type of mods this plugin supports
enum PluginMod {
  PLUGIN_MOD_UNSPECIFIED = 0;
  PLUGIN_MOD_CLI = 1;
  PLUGIN_MOD_DEPENDENCYRESOLVER = 2;
}

// HookType enumerates the type of hook Optimus supports
enum HookType {
  HOOK_TYPE_UNSPECIFIED = 0;
  HOOK_TYPE_PRE = 1;
  HOOK_TYPE_POST = 2;
  HOOK_TYPE_FAIL = 3;
}

message PluginInfoRequest {}
message PluginInfoResponse {
  string name = 1;
  string description = 2;
  PluginType plugin_type = 3;
  repeated PluginMod plugin_mods = 4;

  // plugin_version is the semver version of this individual plugin
  string plugin_version = 5;
  // api_versions indicates the versions of the Optimus Plugin API
  // this plugin supports
  repeated string api_version = 6;

  // docker image including version if this executes a docker image
  string image = 10;

  // HOOK specific
  // name of hooks on which this should depend on before executing
  repeated string depends_on = 20;
  HookType hook_type = 21;

  // Experimental
  // will be mounted inside the container as volume
  string secret_path = 30 [deprecated = true];
}

message PluginOptions {
  bool dry_run = 1;
}
